[] (Integer) {
   *{
    @  \(\[Integer]:one):debugPrint;
      \(\[Integer]:add (\[Integer]:add (\[Integer]:one) (\[Integer]:one)) (\[Integer]:one)):debugPrint;
   }
}

[Integer : [Object]] (Object) {
   <<dlang ##
            import std.conv;
            import std.stdio;
            int value;
         ##

   ~ as *([%INTEGER] literal) {
      <<dlang ##
            this.value = to!int((cast(LITERAL_STRING)LOBJECT_literal).it);
         ##;
   }

   ~ zero *{
      \:~as ##0##;
   }
   ~ one *{
      \:~as ##1##;
   }

   :: add *([Integer] i1, [Integer] i2) -> [Integer]  {
         [Integer] result = \[Integer]:zero;
         <<dlang ##
            (cast(CLASSIMPL_Integer)LOBJECT_result).value = (cast(CLASSIMPL_Integer)LOBJECT_i1).value + (cast(CLASSIMPL_Integer)LOBJECT_i2).value;
         ##;
      }->result

   ++ debugPrint *{
      <<dlang ##
            writeln(this.value);
         ##;
   }
}

[Object] {
   ++ asdf *{}
}








