

[] (SystemIO, String, Byte, Data, List, Integer, Natural, Sequence, Boolean, Loops, Variable, Mapping, Maybe, SourcePosition) {
   *{

      @[Maybe<[String]>] y1 = \[Maybe<[String]>]:nothing;
      @[Maybe<[String]>] y2 = \[Maybe<[String]>]:as \[String]:as ##Hello Worl!##;
      
      @\[SystemIO]:log \y1:isOrElse (*([String] s)->s) (*->nothingStr);
      @\[SystemIO]:log \y2:isOrElse (*([String] s)->s) (*->nothingStr);


      @@[Sequence<[Number]>] 5Times = [:[Sequence<[Number]>]] {
         |++ length *->\[Natural]:as ##5##
         |++ atIndex *(n)->\[Maybe<[?]>]:as n
      };
      \[Loops]:iterate 5Times *{
         \[SystemIO]:stdout \(\[String]:as ##Hello World!!\n##):ascii;
         \[SystemIO]:stdout \(\[String]:asASCII \[SystemIO]:stdin):ascii;
      };@@
      [SourcePosition] asdf = \[SourcePosition]:initialPositionIn (\[String]:as ##sadf/asdf/filenametest.h##) (\[String]:as ##This is a line....##);
      [SourcePosition] asdf2 = \asdf:startOfNextLine (\[String]:as ##This is a line2....##);
      [SourcePosition] asdf3 = \asdf2:startOfNextLine (\[String]:as ##This is a line3....##);
      [SourcePosition] asdf4 = \asdf3:nextColumn;


      \[SystemIO]:stdout \(\asdf4:description):ascii;
      \[SystemIO]:stdout \(\[String]:as ##\n##):ascii;

      \[Loops]:iterate ([:[Sequence<[Natural]>]] {
         |++ length *->\[Natural]:as ##10##
         |++ atIndex *([Natural] n)->\[Maybe<[?]>]:as \n:adding \[Natural]:as ##300000238974289438900234##
      }) *([Natural] index, [Natural]value){
         \[SystemIO]:stdout \(\[String]:stringFormatOf value):ascii;
         \[SystemIO]:stdout \(\[String]:as ##\n##):ascii;
      };
      
      


   } @!{[String] nothingStr = \[String]:as ##<NOTHING>##}
}

[SystemIO] (String) {
      <<dlang ##
            import std.stdio;
            import std.bigint;
         ##

   :: stdout *([Data] data) {
      [] _ = <<dlang ##
            write(cast(string)((cast(WRAP!(ubyte[]))((cast(CLASSTYPE_Data)LOBJECT_data).IMETHOD_internalData(null, []))).it));
         ##;
   }

   :: stdin *-> [Data] {
      [Data] readedData = \[Data]:copy \[Sequence<[Byte]>]:empty;
      [] _ = << dlang ##
         //BigInt bytesToRead = (cast(WRAP!(BigInt))((cast(CLASSTYPE_Integer)LOBJECT_bytesToRead).IMETHOD_internalInteger(null, []))).it;
         string rawLine = readln();
         if (rawLine == null) {
            rawLine = "";
         }
         ubyte[] line = cast(ubyte[])(rawLine);
         (cast(CLASSIMPL_Data)LOBJECT_readedData).value = new WRAP!(ubyte[])(line);
      ##;
@chunks(stdin, 4096)
@
@foreach (ubyte[] buffer; chunks(stdin, 4096))
 @   {
  @      ... use buffer ...
  @  }
@
   } -> readedData


}


[Data :[Sequence<[Byte]>]] (Byte, Sequence, Loops, Natural)
{
   <<dlang ##
         WRAP!(ubyte[]) value;
      ##

   ~ copy *([Sequence<[Byte]>] bytes) {
      [Natural] length = \bytes:length;
      :length = *>length;
      :atIndex = *->\[Maybe<[&E]>]:nothing;
      \[Loops]:iterate bytes *([Natural] index, [Byte] byte) {
         [] _ = <<dlang ##
            
         ##;
      }
   }

   ~ concatenating *([Sequence<[Data]>] datas) {
      [] _ = <<dlang ##
         import std.stdio;
         ubyte[] concatedData;
      ##;
      \[Loops]:iterate datas *([]_, [Data] data) {
         [] _ = <<dlang ##
            ubyte[] thisData = (cast(WRAP!(ubyte[]))((cast(CLASSTYPE_Data)LOBJECT_data).IMETHOD_internalData(null, []))).it;
            concatedData ~= thisData;
         ##;
      };
      [] _ = <<dlang ##
         this.value = new WRAP!(ubyte[])(concatedData);
      ##;
   }

   |++ length [->[Natural]]
   |++ atIndex [[Natural]->[Maybe<[&E]>]]


   - internalData *{
      [] _ = <<dlang ##
            return this.value;
         ##;
   }
}

[Byte]
{

}

[String] (Data, Sequence, List) 
   [Data] ascii
{
   <<dlang ##
         import std.bigint;
         import std.format;
      ##

   ~ as *([%STRING] literal) {
      .ascii = \[Data]:copy \[Sequence<[Byte]>]:empty;
      [] _ = <<dlang ##
         ubyte[] literalBytes = cast(ubyte[])((cast(WRAP!(string))LOBJECT_literal).it);
         (cast(CLASSIMPL_Data)IOBJECT_ascii).value = new WRAP!(ubyte[])(literalBytes);
      ##;
   }

   ~ asASCII *([Data] ascii) {
      .ascii = ascii
   }

   ~ concatenating *([Sequence<[String]>] strings) {
      [Sequence<[Data]>] asciis = [:[Sequence<[Data]>]] { 
         |++ length *->\strings:length
         |++ atIndex *([Natural] i)->\(\strings:atIndex i):isOrElse (*([String] s)->\[Maybe<[?]>]:as \s:ascii) [Maybe<[?]>]:nothing
      };
      \:~asASCII \[Data]:concatenating asciis
   }

   ~ stringFormatOf *([Integer] integer) {
      .ascii = \[Data]:copy \[Sequence<[Byte]>]:empty;
      [] _ = << dlang ##
         BigInt integer = (cast(WRAP!(BigInt))((cast(CLASSTYPE_Integer)LOBJECT_integer).IMETHOD_internalInteger(null, []))).it;
         ubyte[] bytes = cast(ubyte[])(format("%d", integer));
         (cast(CLASSIMPL_Data)IOBJECT_ascii).value = new WRAP!(ubyte[])(bytes);
      ##;
   }

   ++ appending *([String] other) -> [String] {
      [String] this = ^;
      [Sequence<[String]>] both = [:[Sequence<[String]>]] { 
         |++ length *->\[Natural]:as ##2##
         |++ atIndex *([Natural] index)->[Maybe<[String]>]{
            [Boolean] indexIs0 = \index:isEqualTo (\[Natural]:as ##0##);
         }->\[Maybe<[String]>]:as \indexIs0:ifOrElse (*->this) (*->other)
      }
   } -> \[String]:concatenating both

   ++ ascii *->.ascii
}

[Loops] (Sequence, Natural, Variable, Boolean)
{
   :: iterate *([Sequence<['E]>] sequence, [[Natural]['E]->] getNext) {
      [Variable<[Natural]>] currentIndex = \[Variable<[?]>]:as \[Natural]:as ##0##;
      \[?:]:while ((*->((\index:isLessThan \sequence:length)!{[Natural] index = \currentIndex:get}))) *{
         {
            \element:isOrElse *(e){
               \getNext index e;
            } *{};
            @\getNext index element;
            \currentIndex:set \index:adding (\[Natural]:as ##1##);
         }!{
            [Natural] index = \currentIndex:get;
            [Maybe<['E]>] element = \sequence:atIndex index;
         }
      }
   }

   :: while *([->[Boolean]] condition, [->] action) {
      \[?:]:until *([->] stop) {
         \(\condition):ifOrElse action stop
      }
   }

   :: until *([[['E]->]->['E]] actionWithStop) { @add
      [] _ = <<dlang ##
         bool continueActions = true;
         while (continueActions) {
      ##;
      \actionWithStop *{
         [] _ = <<dlang ##
            continueActions = false;
         ##
      };
      [] _ = <<dlang
      ##
         }
      ##;
   }
}

[Variable<E>]
   [&E] variableObject
{
   ~ as *([&E] initialInstantiation) {
      .variableObject = initialInstantiation;
   }

   ++ get *->.variableObject

   ++ set *([&E] newInstantiation) {
      [] _ = << dlang ##
         IOBJECT_variableObject = LOBJECT_newInstantiation;
      ##;
   }
}


[Sequence<E>] (Maybe, Natural)
{
   ++ length [->[Natural]]
   ++ atIndex [[Natural]->[Maybe<[&E]>]]

   :: empty *-> [:[Sequence<[&E]>]] { 
         |++ length *->\[Natural]:as ##0##
         |++ atIndex *->\[Maybe<[&E]>]:nothing
      }

}


[Natural :[Integer]] (Integer)
{
   <<dlang ##
         import std.format;
         import std.conv;
         import std.bigint;
      ##
   

   ~ as *([%NATURAL] literal) {
      [Integer] integerRepresentation = <<dlang ##
         CLASSIMPL_Integer LOBJECT_integerRepresentation = cast(CLASSIMPL_Integer)CLASSIMPL_Integer.TMETHOD_as(caller, cast(OBJECT[])[LOBJECT_literal]);
      ##;
      \$~>integerRepresentation;
   }

   ++ adding *([Natural] toAdd) -> [Natural] {
      [Natural] result = << dlang ##
         BigInt thisBigInt = (cast(WRAP!(BigInt))((cast(CLASSTYPE_Integer)self).IMETHOD_internalInteger(null, []))).it;
         BigInt toAddBigInt = (cast(WRAP!(BigInt))((cast(CLASSTYPE_Integer)LOBJECT_toAdd).IMETHOD_internalInteger(null, []))).it;
         BigInt bigIntResult = thisBigInt + toAddBigInt;
         OBJECT LOBJECT_result = CLASSIMPL_Natural.TMETHOD_as(caller, cast(OBJECT[])[new WRAP!(string)(format("%d", bigIntResult))]);
      ##;
   } -> result
}


[Maybe<E>] 
{
   ~ nothing *{
      :isOrElse = *([[&E]->['O]] is, [->['O]] else) -> \else
   }

   ~ as *([&E] it) {
      :isOrElse = *([[&E]->['O]] is, [->['O]] else) -> \is it
   }

   ++ isOrElse [[[&E]->['O]][->['O]]->['O]]
}

[Boolean] 
{
   ~ false *{
      :ifOrElse = *([->['O]] if, [->['O]] else) -> \else
   }

   ~ true *{
      :ifOrElse = *([->['O]] if, [->['O]] else) -> \if
   }

   ++ ifOrElse [[->['O]][->['O]]->['O]]
}


[Integer] (Boolean)
{
   <<dlang ##
            import std.conv;
            import std.bigint;
            WRAP!(BigInt) value;
         ##

   ~ as *([%INTEGER] literal) {
      [] _ = <<dlang ##
         this.value = new WRAP!(BigInt)(BigInt((cast(WRAP!(string))LOBJECT_literal).it));
      ##;
   }

   ++ isLessThan *([Integer] otherInteger)-> [Boolean] {
      [Boolean] isLessThan = << dlang ## 
         bool isLessThan = this.value.it < (cast(WRAP!(BigInt))((cast(CLASSTYPE_Integer)LOBJECT_otherInteger).IMETHOD_internalInteger(null, []))).it;
         OBJECT LOBJECT_isLessThan = isLessThan ? CLASSIMPL_Boolean.TMETHOD_true(caller, cast(OBJECT[])[]) : CLASSIMPL_Boolean.TMETHOD_false(caller, cast(OBJECT[])[]);
      ##;
   } -> isLessThan

   ++ isEqualTo *([Integer] otherInteger)-> [Boolean] {
      [Boolean] isEqualTo = << dlang ## 
         bool isEqualTo = this.value.it == (cast(WRAP!(BigInt))((cast(CLASSTYPE_Integer)LOBJECT_otherInteger).IMETHOD_internalInteger(null, []))).it;
         OBJECT LOBJECT_isEqualTo = isEqualTo ? CLASSIMPL_Boolean.TMETHOD_true(caller, cast(OBJECT[])[]) : CLASSIMPL_Boolean.TMETHOD_false(caller, cast(OBJECT[])[]);
      ##;
   } -> isEqualTo

   

   - internalInteger *{
      [] _ = <<dlang ##
            return this.value;
         ##;
   }

}


@@
Analysis: analysing class - InternalValue...
Analysis: analysing class - InternalPointer...
Analysis: analysing class - Object...
Analysis: analysing class - Variable...
Analysis: analysing class - InternalNonReleasingReference...
Analysis: analysing class - WeakReference...
Analysis: analysing class - Boolean...
Analysis: analysing class - Container...
Analysis: analysing class - TrainCarriage...
Analysis: analysing class - ControlFlowRecursiveConstructor...
Analysis: analysing class - ControlFlowRecursiveTransformer...
Analysis: analysing class - SingleMapping...
Analysis: analysing class - BinaryTree...
Analysis: analysing class - Byte...
Analysis: analysing class - Conjecture...
Analysis: analysing class - LambdaAToB...
Analysis: analysing class - Wrapper...
Analysis: analysing class - CoreFlow...
Analysis: analysing class - Train...
Analysis: analysing class - ControlFlow2...
Analysis: analysing class - Maybe...
Analysis: analysing class - List...
Analysis: analysing class - Sequence...
Analysis: analysing class - Sequences2...
Analysis: analysing class - Data...
Analysis: analysing class - SetObject...
Analysis: analysing class - Integer...
Analysis: analysing class - Natural...
Analysis: analysing class - ControlFlow...
Analysis: analysing class - String...
Analysis: analysing class - Token...
Analysis: analysing class - Loops...
Analysis: analysing class - SourcePosition...
Analysis: analysing class - Error...
Analysis: analysing class - MappingBucket...
Analysis: analysing class - Mapping...
Analysis: analysing class - CommandReader...
Analysis: analysing class - Character...
Analysis: analysing class - O...
Analysis: analysing class - M...
Analysis: analysing class - SocketPort...
Analysis: analysing class - InternalSocketHeader...
Analysis: analysing class - DataStream...
Analysis: analysing class - AutomaticallyClosingSocketLink...
Analysis: analysing class - OutputStream...
Analysis: analysing class - SocketLinkOutputStream...
Analysis: analysing class - InputStream...
Analysis: analysing class - SocketLinkInputStream...
Analysis: analysing class - SocketConnection...
Analysis: analysing class - SocketBinding...
Analysis: analysing class - AutomaticallyClosingInputFileDataStream...
Analysis: analysing class - AutomaticallyClosingOutputFileDataStream...
Analysis: analysing class - IPAddress...
Analysis: analysing class - SystemInputOutput...
Analysis: analysing class - Configuration...
Analysis: analysing class - Debug...
Analysis: analysing class - Parser...
Analysis: analysing class - Commands...
Analysis: analysing class - DainaGeneralIdentifier...
Analysis: analysing class - DainaGenericDeclarationList...
Analysis: analysing class - DainaDependancyStructure...
Analysis: analysing class - DainaClassIdentifier...
Analysis: analysing class - DainaType...
Analysis: analysing class - DainaObjectDeclaration...
Analysis: analysing class - DainaClassMethod...
Analysis: analysing class - DainaCompilerInjection...
Analysis: analysing class - DainaExpression...
Analysis: analysing class - DainaClass...
Analysis: analysing class - DLangSynthesizer...
Analysis: analysing class - Daina...


@@


@ DAINA COMPILER -------

[SourcePosition] (
         Natural,
         String,
         Variable,
         Object,
         Loops
      )
   [String] sourceName
   [Natural] line
   [Natural] column
   [String] lineContent
{
   ~ initialPositionIn *([String] sourceName, [String] lineContent) {
      \:~lineAndColumnIn (\[Natural]:as ##0##) (\[Natural]:as ##0##) sourceName lineContent;
   }

   ~ -+- lineAndColumnIn *([Natural] line, [Natural] column, [String] sourceName, [String] lineContent) {
      .sourceName = sourceName;
      .column = column;
      .line = line;
      .lineContent = lineContent;
   }

   ++ description *-> [String] {
      [String] colon = \[String]:as ##:##;
      [String] pos = \[String]:as ## pos ##;
      [String] line = \[String]:stringFormatOf (\.line:adding (\[Natural]:as ##1##));
      [String] column = \[String]:stringFormatOf (\.column:adding (\[Natural]:as ##1##));
      [String] tabulation = \[String]:as ##\n    ##;
      [Variable<[String]>] linePositionArrow = \[Variable<[String]>]:as (\[String]:as ####);
      \[Loops]:iterate ([:[Sequence<[Natural]>]] { 
         |++ length *->.column
         |++ atIndex *(i)->\[Maybe<[?]>]:as i
      }) *{
         [String] curr = \linePositionArrow:get;
         \linePositionArrow:set (\curr:appending (\[String]:as ## ##));
      };
      [String] curr = \linePositionArrow:get;
      \linePositionArrow:set (\curr:appending (\[String]:as ##^##));
   } -> (\.sourceName:appending (\colon:appending (\line:appending (\pos:appending (\column:appending (\tabulation:appending (\.lineContent:appending (\tabulation:appending (\linePositionArrow:get)))))))))

   ++ nextColumn *-> [SourcePosition] {
   } -> \[SourcePosition]:lineAndColumnIn (.line) (\.column:adding (\[Natural]:as ##1##)) (.sourceName) (.lineContent)

   ++ startOfNextLine *([String] lineContent)-> [SourcePosition] {
   } -> \[SourcePosition]:lineAndColumnIn (\.line:adding (\[Natural]:as ##1##)) (\[Natural]:as ##0##) (.sourceName) lineContent
}













