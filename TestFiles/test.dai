[] (SystemIO, String, Byte, Data, List, Integer, Natural, Boolean, Loops, Variable, Mapping, Maybe) {
   *{

      [Maybe<[String]>] y1 = \[Maybe<[String]>]:nothing;
      [Maybe<[String]>] y2 = \[Maybe<[String]>]:as \[String]:as ##Hello Worl!##;
      @
      \y1:isOrElse *([String] s) {
         \[SystemIO]:log s
      } *{
         \[SystemIO]:log \[String]:as ##<NOTHING>##
      };

@@

      [:[Maybe<[]>]] {
         |++ nothing *{\[SystemIO]:log \[String]:as ##<NOTHING>##}
         |++ as *([String] s){\[SystemIO]:log s}
      };
@@
      @\[SystemIO]:log s;

      @@\(\[DebugLogHelloWorld]:new):log;

      [DebugLog] helloWorldAnonymous = [:[DebugLogHelloWorld]] {
         \$~new;
         |++ toString *->[String] {
         } -> \[String]:as ##Hello World! from Anonymous Class##
      };
@@
      @\helloWorldAnonymous:log;
    @  \(\[Integer]:one):debugPrint;
      @\(\[Integer]:add (\[Integer]:add (\[Integer]:one) (\[Integer]:one)) (\[Integer]:one)):debugPrint;
   }
}

[SystemIO] (String) {
      <<dlang ##
            import std.stdio;
         ##

   :: log *([String] s) {
      <<dlang ##
            writeln((cast(CLASSIMPL_String)LOBJECT_s).value);
         ##;
   }
}

@@
Integer
Byte
List
Boolean
Variable
Maybe
@@


[Maybe<E>] 
{
   ~ nothing *{
      :isOrElse = *([[&E]->['O]] is, [->['O]] else) {\else}
   }

   ~ as *([&E] it) {
      :isOrElse = *([[&E]->['O]] is, [->['O]] else) {\is it}
   }

   ++ isOrElse [[[&E]->['O]][->['O]]->]
}

@[SelectMaybe]
@@

[MaybeEnum<O>] {
   ++ nothing [->[&O]]
   ++ just [['E]->[&O]]
}
@@

[String] {
   <<dlang ##
            string value;
         ##

   ~ as *([%STRING] literal) {
      <<dlang ##
            this.value = (cast(LITERAL_STRING)LOBJECT_literal).it;
         ##;
   }
}




@@
[Integer : [Object]] (Object) {
   <<dlang ##
            import std.conv;
            import std.stdio;
            int value;
         ##

   ~ as *([%INTEGER] literal) {
      <<dlang ##
            this.value = to!int((cast(LITERAL_STRING)LOBJECT_literal).it);
         ##;
   }

   ~ zero *{
      \:~as ##0##;
   }
   ~ one *{
      \:~as ##1##;
   }

   :: add *([Integer] i1, [Integer] i2) -> [Integer]  {
         [Integer] result = \[Integer]:zero;
         <<dlang ##
            (cast(CLASSIMPL_Integer)LOBJECT_result).value = (cast(CLASSIMPL_Integer)LOBJECT_i1).value + (cast(CLASSIMPL_Integer)LOBJECT_i2).value;
         ##;
      }->result

   ++ debugPrint *{
      <<dlang ##
            writeln(this.value);
         ##;
   }
}

[Object] {
   ++ asdf *{}
}



@@




