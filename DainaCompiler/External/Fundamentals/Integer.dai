
@@

Integer : [SetObject<[Integer]>]
	:: zero [ -> [Integer]]
	:: newArbitraryIntegerSeededByData [[Data] -> [Integer]]
	:: newPositive [[%NATURAL] -> [Integer]]
	:: newNegative [[%NATURAL] -> [Integer]]
	|++ provideArbitraryProxyDataForComparisonWhichIsIdenticalForEqualObjects [ -> [Data]]
	|++ isEqualTo [[Integer] -> [Boolean]]
	++ isNegative [ -> [Boolean]]
	++ isGreaterThan [[Integer] -> [Boolean]]
	++ modulus [ -> [Integer]]
	++ isGreaterThanOrEqualTo [[Integer] -> [Boolean]]
	++ isLessThan [[Integer] -> [Boolean]]
	++ isLessThanOrEqualTo [[Integer] -> [Boolean]]
	++ divisionByIntegerProvidingResultAndRemainderIfDefined [[Integer],[[Integer],[Integer] -> ] -> ]
	++ integerByMultiplying [[Integer] -> [Integer]]
	++ integerBySubtracting [[Integer] -> [Integer]]
	++ integerByInvertingSign [ -> [Integer]]
	++ integerByAdding [[Integer] -> [Integer]]
	
@@







[Integer : [SetObject<[Integer]>]] (Data, Boolean, Wrapper, Object, CoreFlow, SetObject)
	@internal representation of integer is {(sign:1 or -1), 0-9999, 0-9999 ...., -1}
	@integer could be calculated as representation[0]*(representation[1]+representation[2]*10000^1 + r[3]*10000^2 ....)
	@the constant representation is the same as above except reverse [1...size-2] index's
	@for some reason I say segment in this code when I actually mean integer representation (I have a problem)
	[Data] internalInteger
{
	~ zero *{
	   	\::newPositive 0;
	}

	~ one *{
	   	\::newPositive 1;
	}

	~ newArbitraryIntegerSeededByData *([Data] someDataThatIsAlsoProbablyArbitrary) {
		\::newSetObject;
		.internalInteger = \[Data]:emptyData;
		<instant
		##
			size_t dataSize = injected_DATA_SIZE_WITH_DATA_OBJECT(Z_local_someDataThatIsAlsoProbablyArbitrary);
			char *dataBytes = injected_DATA_POINTER_WITH_DATA_OBJECT(Z_local_someDataThatIsAlsoProbablyArbitrary);
			int i,byte;
			unsigned long hash = 5381;//5381;81419417
			int lengthOfStringToHash = (int)dataSize;
			for (i = 0; i < dataSize; ++i) {
				//printf("P:%lu\n", hash);
				byte = dataBytes[i];
				hash = ((hash << 5) + hash) + byte;
			}
			long hashComponent1 = hash%10000;
			hash /= 10000;
			long hashComponent2 = hash%10000;
			//hash /= 10000;
			//long hashComponent3 = hash%10000;
			long someRandomIntegerRepresentation[4] = {1,hashComponent2,hashComponent1,-1};

			injected_INTEGER_SET_WITH_INTEGER_OBJECT_AND_CONSTANT_INTEGER_REPRESENTATION(Z_self, someRandomIntegerRepresentation);
		##;
	}

	~ newPositive *([%NATURAL] constantNatural) {
		\::newSetObject;
		.internalInteger = \[Data]:emptyData;
		<instant
		##
			/*printf("[0] = %ld\n", ((long *)Z_local_constantInteger)[0]);
			printf("[1] = %ld\n", ((long *)Z_local_constantInteger)[1]);
			printf("[2] = %ld\n", ((long *)Z_local_constantInteger)[2]);
			printf("[3] = %ld\n", ((long *)Z_local_constantInteger)[3]);*/
			injected_INTEGER_SET_WITH_INTEGER_OBJECT_AND_CONSTANT_INTEGER_REPRESENTATION(Z_self, Z_local_constantNatural);
		##;
	}

	~ newNegative *([%NATURAL] constantNatural) {
		\::newSetObject;
		.internalInteger = \[Data]:emptyData;
		<instant
		##
			int constantNaturalIsZero = (((long*)Z_local_constantNatural)[1] == 0 && ((long*)Z_local_constantNatural)[2] == -1);
			if (!constantNaturalIsZero)
				((long*)Z_local_constantNatural)[0] = -1;
			injected_INTEGER_SET_WITH_INTEGER_OBJECT_AND_CONSTANT_INTEGER_REPRESENTATION(Z_self, Z_local_constantNatural);
		##;
	}

	|++ provideArbitraryProxyDataForComparisonWhichIsIdenticalForEqualObjects *->[Data]{}->.internalInteger

	|++ isEqualTo *([Integer] someOtherInteger) -> [Boolean] {
		[Wrapper<[Boolean]>] isGreaterThan = \[Wrapper<[Boolean]>]:wrapperWithObject (\[Boolean]:false);
		[Wrapper<[Boolean]>] isLessThan = \[Wrapper<[Boolean]>]:wrapperWithObject (\[Boolean]:false);
		\:compareToSomeIntegerSettingIsLargerThanOrIsLessThan someOtherInteger isGreaterThan isLessThan;
		[Boolean] result = \[Boolean]:not (\[Boolean]:or (\isGreaterThan:unwrap) \isLessThan:unwrap);
	} -> result

	++ equals *([Integer] someOtherInteger) -> [Boolean] {
		[Wrapper<[Boolean]>] isGreaterThan = \[Wrapper<[Boolean]>]:wrapperWithObject (\[Boolean]:false);
		[Wrapper<[Boolean]>] isLessThan = \[Wrapper<[Boolean]>]:wrapperWithObject (\[Boolean]:false);
		\:compareToSomeIntegerSettingIsLargerThanOrIsLessThan someOtherInteger isGreaterThan isLessThan;
		[Boolean] result = \[Boolean]:not (\[Boolean]:or (\isGreaterThan:unwrap) \isLessThan:unwrap);
	} -> result

	@- debugASCIIDumpOfInternalRepresentation *{\.internalInteger:debugASCIIDumpOfData;}

	- compareToSomeIntegerSettingIsLargerThanOrIsLessThan *([Integer] someOtherInteger, [Wrapper<[Boolean]>] isLargerThan, [Wrapper<[Boolean]>] isLessThan) {
		<instant
		##
			PULL_INTEGER_REPRESENTATIONS_FOR_OPERATION;
			int otherIntHasALargerMagnitudeThanSelfInt = 0;
			int selfHasALargerMagnitudeThanOtherInt = 0;
			SEG2_IS_LARGER_IN_MAGNITUDE_WITH_SEG12_SEG12SIZE_AND_RESULT(integerRepresentationForSelf, integerRepresentationForOtherInteger, integerRepresentationSizeForSelf, integerRepresentationSizeForOtherInteger, otherIntHasALargerMagnitudeThanSelfInt);
			SEG2_IS_LARGER_IN_MAGNITUDE_WITH_SEG12_SEG12SIZE_AND_RESULT(integerRepresentationForOtherInteger, integerRepresentationForSelf, integerRepresentationSizeForOtherInteger, integerRepresentationSizeForSelf, selfHasALargerMagnitudeThanOtherInt);
			int selfSegmentIsNegative = (integerRepresentationForSelf[0] == -1 && !(integerRepresentationForSelf[1] == 0 && integerRepresentationForSelf[2] == -1));
			int otherSegmentIsNegative = (integerRepresentationForOtherInteger[0] == -1 && !(integerRepresentationForOtherInteger[1] == 0 && integerRepresentationForOtherInteger[2] == -1));
			int otherSegmentIsLarger = ((!otherSegmentIsNegative && (selfSegmentIsNegative || otherIntHasALargerMagnitudeThanSelfInt)) || (otherSegmentIsNegative && selfSegmentIsNegative && selfHasALargerMagnitudeThanOtherInt));
			int selfSegmentIsLarger = ((!selfSegmentIsNegative && (otherSegmentIsNegative || selfHasALargerMagnitudeThanOtherInt)) || (selfSegmentIsNegative && otherSegmentIsNegative && otherIntHasALargerMagnitudeThanSelfInt));
			if (selfSegmentIsLarger) {		
		##;
				\isLargerThan:store (\[Boolean]:true);
		<instant
		##
			}
			if (otherSegmentIsLarger) {
		##;
				\isLessThan:store (\[Boolean]:true);
		<instant
		##
				
			}
		##;
	}

	++ isNegative *() -> [Boolean] {
		[Integer] zero = \[Integer]:zero;
	} -> \[Boolean]:not (\:isGreaterThanOrEqualTo zero)

	++ isGreaterThan *([Integer] someOtherInteger) -> [Boolean] {
		[Wrapper<[Boolean]>] isGreaterThan = \[Wrapper<[Boolean]>]:wrapperWithObject (\[Boolean]:false);
		[Wrapper<[Boolean]>] isLessThan = \[Wrapper<[Boolean]>]:wrapperWithObject (\[Boolean]:false);
		\:compareToSomeIntegerSettingIsLargerThanOrIsLessThan someOtherInteger isGreaterThan isLessThan;
		[Boolean] result = \isGreaterThan:unwrap;
	} -> result



	++ modulus *->[Integer] {
		[Wrapper<[Integer]>] wrappedIntegerModulus = \[Wrapper<[Integer]>]:wrapperWithObject (\:integerByAdding (\[Integer]:zero));
		\wrappedIntegerModulus:retrive *([Integer] integerModulus) {
			[Boolean] modulusIsPositive = \integerModulus:isGreaterThanOrEqualTo (\[Integer]:zero);
			\modulusIsPositive:ifFalse 
			*{
				\wrappedIntegerModulus:transformStoredObject *([Integer] integerModulus)-> \integerModulus:integerByInvertingSign;	
			};
		};
	} -> \wrappedIntegerModulus:unwrap

	++ isGreaterThanOrEqualTo *([Integer] someOtherInteger) -> (\[Boolean]:or (\:isGreaterThan someOtherInteger) (\:isEqualTo someOtherInteger))

	++ isLessThan *([Integer] someOtherInteger) -> \[Boolean]:not (\:isGreaterThanOrEqualTo someOtherInteger)
	
	++ isLessThanOrEqualTo *([Integer] someOtherInteger) -> \[Boolean]:not (\:isGreaterThan someOtherInteger)

	++ divisionByIntegerProvidingResultAndRemainderIfDefined *([Integer] someDivisor, [[Integer] [Integer] -> ] resultAndRemainderReceiver) {
		[Integer] dividend = \:integerByAdding (\[Integer]:zero);
		[Integer] someDivisorModulus = \someDivisor:modulus;

		[Boolean] divisorIsEqualToZero = (\someDivisor:isEqualTo (\[Integer]:zero));	
		\divisorIsEqualToZero:ifFalse *{
			[Wrapper<[Integer]>] wrappedCurrentResult = \[Wrapper<[Integer]>]:wrapperWithObject (\[Integer]:zero);
			[Wrapper<[Integer]>] wrappedCurrentRemainder = \[Wrapper<[Integer]>]:wrapperWithObject (\dividend:modulus);

			[[->] [->]->] branchOnShouldContinueDividingOrNot = *([->]continueDividing, [->]stopDividing){
				[Boolean] divisorIsLargerThanCurrentRemainder = \someDivisorModulus:isGreaterThan (\wrappedCurrentRemainder:unwrap);
				\divisorIsLargerThanCurrentRemainder:ifTrue stopDividing;
				\divisorIsLargerThanCurrentRemainder:ifFalse continueDividing;
			};

			\branchOnShouldContinueDividingOrNot *{
				\[CoreFlow]:repeatUntilStopped *([->] stop) {
					[Integer] currentRemainder = \wrappedCurrentRemainder:unwrap;
					[Integer] resultOfPartialDivision = (\[Integer]:newPositive 1337);
					<instant @ resultOfPartialDivision = \currentRemainder:integerByPartialModulusDivision someDivisorModulus;
					##
					{
						void* Dynamic_integerByPartialModulusDivision = allocateDynamicLambda(1,1,&Z_classmethod_Integer_integerByPartialModulusDivision);
						RetainDynamicObject(Z_local_currentRemainder);
						*(((void* *)(Dynamic_integerByPartialModulusDivision+sizeof(DynamicLambda)+sizeof(void*)*0))) = Z_local_currentRemainder;
						ReleaseDynamicObject(Z_local_resultOfPartialDivision);
						Z_local_resultOfPartialDivision = ((void*(*)(void*,void*))(((DynamicLambda *)(Dynamic_integerByPartialModulusDivision))->method))(Dynamic_integerByPartialModulusDivision+sizeof(DynamicLambda), Z_local_someDivisorModulus);
						ReleaseDynamicObject(Dynamic_integerByPartialModulusDivision);
					}
					##;
					@\wrappedCurrentRemainder:retrive *([Integer]i) {\i:debugASCIIDumpOfInternalRepresentation;};
					[Boolean] partialDivisionWasASuccess = \resultOfPartialDivision:isGreaterThan (\[Integer]:zero);
					\partialDivisionWasASuccess:ifTrue *{
						\wrappedCurrentResult:store (\resultOfPartialDivision:integerByAdding \wrappedCurrentResult:unwrap);
						[Integer] amountToSubtractFromRemainder = \resultOfPartialDivision:integerByMultiplying someDivisorModulus;
						\wrappedCurrentRemainder:transformStoredObject *([Integer] currentRemainder)->(\currentRemainder:integerBySubtracting amountToSubtractFromRemainder);
					};
					\partialDivisionWasASuccess:ifFalse stop;
					\branchOnShouldContinueDividingOrNot *{} stop;
				};

				\branchOnShouldContinueDividingOrNot *{
					\[CoreFlow]:repeatUntilStopped *([->] stop) {
						\wrappedCurrentResult:transformStoredObject *([Integer] currentResult)->(\currentResult:integerByAdding (\[Integer]:newPositive 1));
						\wrappedCurrentRemainder:transformStoredObject *([Integer] currentRemainder)->(\currentRemainder:integerBySubtracting someDivisorModulus);
						\branchOnShouldContinueDividingOrNot *{} stop;
					};

				} *{};
			} *{};

			[Boolean] resultShouldBeNegative = \[Boolean]:xor (\dividend:isNegative) (\someDivisor:isNegative);
			\resultShouldBeNegative:ifTrue *{
				\wrappedCurrentResult:transformStoredObject *([Integer] i)->\i:integerByInvertingSign;
				\wrappedCurrentRemainder:transformStoredObject *([Integer] i)->\i:integerByInvertingSign;
			};
			\resultAndRemainderReceiver (\wrappedCurrentResult:unwrap) (\wrappedCurrentRemainder:unwrap);
		};	
	}

	++ integerByMultiplying *([Integer] someOtherInteger) -> [Integer] {
		[Integer] resultInteger = \[Integer]:zero;

		<instant
		##
			PULL_INTEGER_REPRESENTATIONS_FOR_OPERATION;

			size_t maxResultIntegerRepSize = integerRepresentationSizeForSelf + integerRepresentationSizeForOtherInteger + 1;
			injected_DATA_REALLOCATE_FILLWITHZEROS_WITH_SIZE_AND_DATA_OBJECT((maxResultIntegerRepSize*sizeof(long)), ((struct Z_template_Integer *)(Z_local_resultInteger))->Z_attribute_Integer_internalInteger);
			
			long* resultSegment = (long*)(injected_DATA_POINTER_WITH_DATA_OBJECT(((struct Z_template_Integer *)(Z_local_resultInteger))->Z_attribute_Integer_internalInteger));
			size_t resultSegmentSize = 3;
			resultSegment[2] = 0;
			
			long *integer1 = (integerRepresentationForSelf);
			long *integer2 = (integerRepresentationForOtherInteger);
			size_t integer1Size = integerRepresentationSizeForSelf;
			size_t integer2Size = integerRepresentationSizeForOtherInteger;

			resultSegment[0] = integer1[0]*integer2[0];

			int integer2Position = 1;
			while (integer2[integer2Position] != -1) {

				long integer2SectionMultiplyer = integer2[integer2Position];

				int integer1Position = 1;
				while (integer1[integer1Position] != -1) {

					#define ADD_SECTION_TO_SEGMENT_AT_POSITION_WITH_CARRY_RESULT(_sectionLong, _segment, _position, _carryResult)\
					{\
						long result = _sectionLong+_segment[_position];\
						_carryResult = 0;\
						if (result >= 10000) {\
							_carryResult = 1;\
							result-=10000;\
						}\
						_segment[_position] = result;\
					}

					long sectionMultiplicationResult = integer2[integer2Position]*integer1[integer1Position];
					long sectionMultiplicationResultHigh = sectionMultiplicationResult / 10000;
					long sectionMultiplicationResultLow = sectionMultiplicationResult - sectionMultiplicationResultHigh*10000;
					int positionOfResultSectionInResult = integer2Position + integer1Position - 1;
					int potentialNewResultSegmentSize = 0;


					
					long carry = 0;
					ADD_SECTION_TO_SEGMENT_AT_POSITION_WITH_CARRY_RESULT(sectionMultiplicationResultLow, resultSegment, positionOfResultSectionInResult, carry);
					if (sectionMultiplicationResultLow > 0)
						potentialNewResultSegmentSize = positionOfResultSectionInResult+2;
					positionOfResultSectionInResult++;

					long currentValueToAddToResult = sectionMultiplicationResultHigh+carry;


					while (currentValueToAddToResult != 0) {
						ADD_SECTION_TO_SEGMENT_AT_POSITION_WITH_CARRY_RESULT(currentValueToAddToResult, resultSegment, positionOfResultSectionInResult, carry);
						if (currentValueToAddToResult > 0)
							potentialNewResultSegmentSize = positionOfResultSectionInResult+2;
						positionOfResultSectionInResult++;
						currentValueToAddToResult = carry;
					}


					if (potentialNewResultSegmentSize > resultSegmentSize)
						resultSegmentSize = potentialNewResultSegmentSize;
					integer1Position++;	
				
				} 

				
				integer2Position++;	
			} 

			resultSegment[resultSegmentSize-1] = -1;
			injected_DATA_CHANGE_SIZE_WITH_SIZE_AND_DATA_OBJECT((resultSegmentSize*sizeof(long)), ((struct Z_template_Integer *)(Z_local_resultInteger))->Z_attribute_Integer_internalInteger);
		##;	

	} -> resultInteger

	@assumes divisor <= self && divisor!=0
	- integerByPartialModulusDivision *([Integer] divisior) -> [Integer] {
		[Integer] someOtherInteger = divisior;
		[Integer] resultInteger = \[Integer]:zero;

		<instant
		##
			PULL_INTEGER_REPRESENTATIONS_FOR_OPERATION;

			size_t maxResultIntegerRepSize = integerRepresentationSizeForSelf;
			injected_DATA_REALLOCATE_WITH_SIZE_AND_DATA_OBJECT((maxResultIntegerRepSize*sizeof(long)), ((struct Z_template_Integer *)(Z_local_resultInteger))->Z_attribute_Integer_internalInteger);
			
			long* resultSegment = (long*)(injected_DATA_POINTER_WITH_DATA_OBJECT(((struct Z_template_Integer *)(Z_local_resultInteger))->Z_attribute_Integer_internalInteger));
			size_t resultSegmentSize = 3;
			resultSegment[0] = 1;
			resultSegment[1] = 0;
			resultSegment[2] = -1;
			
			long *dividendSegment = (integerRepresentationForSelf);
			long *divisorSegment = (integerRepresentationForOtherInteger);
			size_t dividendSegmentSize = integerRepresentationSizeForSelf;
			size_t divisorSegmentSize = integerRepresentationSizeForOtherInteger;

			assert(dividendSegmentSize >= divisorSegmentSize);

			long highestSectionOfDivisorApproximation = divisorSegment[divisorSegmentSize-2]+1;
			int dividendSegmentPosition = divisorSegmentSize - 2;
			long valueOfCurrentSectionOfDividend = dividendSegment[dividendSegmentPosition++];
			int numberOfSectionDivisionResults = 0;

			int dividendIsLargeEnoughForApproximateDivision = 0==0;
			if (highestSectionOfDivisorApproximation >= 10000) {
				dividendIsLargeEnoughForApproximateDivision = (dividendSegment[dividendSegmentPosition] != -1);
				highestSectionOfDivisorApproximation = 1;
				dividendSegmentPosition++;
			}
			
			if (dividendIsLargeEnoughForApproximateDivision) {
			do {
				if (dividendSegment[dividendSegmentPosition] != -1) {
					valueOfCurrentSectionOfDividend += 10000*dividendSegment[dividendSegmentPosition++];
				}

				long divisionResultSectionForCurrentSection = valueOfCurrentSectionOfDividend / highestSectionOfDivisorApproximation;				

				long *divisionResultForCurrentSection = calloc(sizeof(long)*((size_t)(numberOfSectionDivisionResults+4)), 1);
				divisionResultForCurrentSection[numberOfSectionDivisionResults+3] = -1;
				long divisionResultForCurrentSectionHigh = divisionResultSectionForCurrentSection / 10000;
				long divisionResultForCurrentSectionLow = divisionResultSectionForCurrentSection - divisionResultForCurrentSectionHigh*10000;
				divisionResultForCurrentSection[numberOfSectionDivisionResults+2] = (divisionResultForCurrentSectionHigh == 0)?-1:divisionResultForCurrentSectionHigh;
				divisionResultForCurrentSection[numberOfSectionDivisionResults+1] = divisionResultForCurrentSectionLow;
				ADD_INTEGER_MODULUS_OF_SEGMENTS_INTO_RESULT_WITH_RESULT_MODULUS_SIZE(resultSegment, divisionResultForCurrentSection, resultSegment, resultSegmentSize);
				resultSegment[resultSegmentSize-1] = -1;
				free(divisionResultForCurrentSection);
				numberOfSectionDivisionResults++;
				

				valueOfCurrentSectionOfDividend = 0;
			} while (dividendSegment[dividendSegmentPosition] != -1);
			}
			
			injected_DATA_CHANGE_SIZE_WITH_SIZE_AND_DATA_OBJECT((resultSegmentSize*sizeof(long)), ((struct Z_template_Integer *)(Z_local_resultInteger))->Z_attribute_Integer_internalInteger);
		##;	
	} -> resultInteger

	++ integerBySubtracting *([Integer] someOtherInteger) -> \:integerByAdding (\someOtherInteger:integerByInvertingSign)

	++ integerByInvertingSign *() -> [Integer] {
		[Integer] resultInteger = \[Integer]:zero;
		<instant
		##
			size_t repSizeInBytes = (injected_DATA_SIZE_WITH_DATA_OBJECT(((struct Z_template_Integer *)(Z_self))->Z_attribute_Integer_internalInteger));
			injected_DATA_REALLOCATE_WITH_SIZE_AND_DATA_OBJECT(repSizeInBytes, ((struct Z_template_Integer *)(Z_local_resultInteger))->Z_attribute_Integer_internalInteger);
			long* integerRepresentationForSelf = (long*)(injected_DATA_POINTER_WITH_DATA_OBJECT(((struct Z_template_Integer *)(Z_self))->Z_attribute_Integer_internalInteger));\
			injected_DATA_COPY_WITH_SIZE_DATAFROM_AND_DATA_OBJECT(repSizeInBytes, integerRepresentationForSelf, ((struct Z_template_Integer *)(Z_local_resultInteger))->Z_attribute_Integer_internalInteger);
			long* integerRepresentationForResult = (long*)(injected_DATA_POINTER_WITH_DATA_OBJECT(((struct Z_template_Integer *)(Z_local_resultInteger))->Z_attribute_Integer_internalInteger));
			integerRepresentationForResult[0] = (integerRepresentationForResult[0]==-1)?1:-1;
		##;
	} -> resultInteger

	++ integerByAdding *([Integer] someOtherInteger) -> [Integer] {
		[Integer] resultInteger = \[Integer]:zero;
		<instant
		##
			PULL_INTEGER_REPRESENTATIONS_FOR_OPERATION;

			size_t maxResultIntegerRepSize = MAX(integerRepresentationSizeForSelf,integerRepresentationSizeForOtherInteger)+1;
			injected_DATA_REALLOCATE_WITH_SIZE_AND_DATA_OBJECT((maxResultIntegerRepSize*sizeof(long)), ((struct Z_template_Integer *)(Z_local_resultInteger))->Z_attribute_Integer_internalInteger);
			
			long* integerRepresentationForResult = (long*)(injected_DATA_POINTER_WITH_DATA_OBJECT(((struct Z_template_Integer *)(Z_local_resultInteger))->Z_attribute_Integer_internalInteger));

			int selfSegmentIsNegative = (integerRepresentationForSelf[0] == -1);
			int otherSegmentIsNegative = (integerRepresentationForOtherInteger[0] == -1);

			size_t resultIntegerRepresentationSize;
			size_t resultIntegerRepresentationSign = 1;
			if (selfSegmentIsNegative == otherSegmentIsNegative) {
				if (selfSegmentIsNegative && otherSegmentIsNegative)
					resultIntegerRepresentationSign = -1;
				ADD_INTEGER_MODULUS_OF_SEGMENTS_INTO_RESULT_WITH_RESULT_MODULUS_SIZE(integerRepresentationForSelf, integerRepresentationForOtherInteger, integerRepresentationForResult, resultIntegerRepresentationSize);
			} else {
				long *seg1 = integerRepresentationForSelf;
				long *seg2 = integerRepresentationForOtherInteger;
				size_t seg1Size = integerRepresentationSizeForSelf;
				size_t seg2Size = integerRepresentationSizeForOtherInteger;
				int seg1IsNegative = selfSegmentIsNegative;
				int seg2IsNegative = otherSegmentIsNegative;
				int seg2HasALargerMagnitudeThanSeg1 = 0;
				SEG2_IS_LARGER_IN_MAGNITUDE_WITH_SEG12_SEG12SIZE_AND_RESULT(seg1, seg2, seg1Size, seg2Size, seg2HasALargerMagnitudeThanSeg1);
				if (seg2HasALargerMagnitudeThanSeg1) {
					seg2 = integerRepresentationForSelf;
					seg1 = integerRepresentationForOtherInteger;
					if (seg2IsNegative) {
						resultIntegerRepresentationSign = -1;
					}
				} else {
					if (seg1IsNegative) {
						resultIntegerRepresentationSign = -1;
					}
				}
				SUBTRACT_INTEGER_MODULUS_OF_SEGMENTS_INTO_RESULT_WITH_RESULT_MODULUS_SIZE(seg1, seg2, integerRepresentationForResult, resultIntegerRepresentationSize);
			}
			integerRepresentationForResult[0] = resultIntegerRepresentationSign;
			integerRepresentationForResult[resultIntegerRepresentationSize-1] = -1;
			/*printf("[0] = %ld\n", integerRepresentationForResult[0]);
			printf("[1] = %ld\n", integerRepresentationForResult[1]);
			printf("[2] = %ld\n", integerRepresentationForResult[2]);
			printf("[3] = %ld\n", integerRepresentationForResult[3]);
			printf("size = %ld\n", resultIntegerRepresentationSize);*/
			injected_DATA_CHANGE_SIZE_WITH_SIZE_AND_DATA_OBJECT((resultIntegerRepresentationSize*sizeof(long)), ((struct Z_template_Integer *)(Z_local_resultInteger))->Z_attribute_Integer_internalInteger);
		##;
	} -> resultInteger

	++ adding *([Integer] someOtherInteger) -> [Integer] {
		[Integer] resultInteger = \[Integer]:zero;
		<instant
		##
			PULL_INTEGER_REPRESENTATIONS_FOR_OPERATION;

			size_t maxResultIntegerRepSize = MAX(integerRepresentationSizeForSelf,integerRepresentationSizeForOtherInteger)+1;
			injected_DATA_REALLOCATE_WITH_SIZE_AND_DATA_OBJECT((maxResultIntegerRepSize*sizeof(long)), ((struct Z_template_Integer *)(Z_local_resultInteger))->Z_attribute_Integer_internalInteger);
			
			long* integerRepresentationForResult = (long*)(injected_DATA_POINTER_WITH_DATA_OBJECT(((struct Z_template_Integer *)(Z_local_resultInteger))->Z_attribute_Integer_internalInteger));

			int selfSegmentIsNegative = (integerRepresentationForSelf[0] == -1);
			int otherSegmentIsNegative = (integerRepresentationForOtherInteger[0] == -1);

			size_t resultIntegerRepresentationSize;
			size_t resultIntegerRepresentationSign = 1;
			if (selfSegmentIsNegative == otherSegmentIsNegative) {
				if (selfSegmentIsNegative && otherSegmentIsNegative)
					resultIntegerRepresentationSign = -1;
				ADD_INTEGER_MODULUS_OF_SEGMENTS_INTO_RESULT_WITH_RESULT_MODULUS_SIZE(integerRepresentationForSelf, integerRepresentationForOtherInteger, integerRepresentationForResult, resultIntegerRepresentationSize);
			} else {
				long *seg1 = integerRepresentationForSelf;
				long *seg2 = integerRepresentationForOtherInteger;
				size_t seg1Size = integerRepresentationSizeForSelf;
				size_t seg2Size = integerRepresentationSizeForOtherInteger;
				int seg1IsNegative = selfSegmentIsNegative;
				int seg2IsNegative = otherSegmentIsNegative;
				int seg2HasALargerMagnitudeThanSeg1 = 0;
				SEG2_IS_LARGER_IN_MAGNITUDE_WITH_SEG12_SEG12SIZE_AND_RESULT(seg1, seg2, seg1Size, seg2Size, seg2HasALargerMagnitudeThanSeg1);
				if (seg2HasALargerMagnitudeThanSeg1) {
					seg2 = integerRepresentationForSelf;
					seg1 = integerRepresentationForOtherInteger;
					if (seg2IsNegative) {
						resultIntegerRepresentationSign = -1;
					}
				} else {
					if (seg1IsNegative) {
						resultIntegerRepresentationSign = -1;
					}
				}
				SUBTRACT_INTEGER_MODULUS_OF_SEGMENTS_INTO_RESULT_WITH_RESULT_MODULUS_SIZE(seg1, seg2, integerRepresentationForResult, resultIntegerRepresentationSize);
			}
			integerRepresentationForResult[0] = resultIntegerRepresentationSign;
			integerRepresentationForResult[resultIntegerRepresentationSize-1] = -1;
			/*printf("[0] = %ld\n", integerRepresentationForResult[0]);
			printf("[1] = %ld\n", integerRepresentationForResult[1]);
			printf("[2] = %ld\n", integerRepresentationForResult[2]);
			printf("[3] = %ld\n", integerRepresentationForResult[3]);
			printf("size = %ld\n", resultIntegerRepresentationSize);*/
			injected_DATA_CHANGE_SIZE_WITH_SIZE_AND_DATA_OBJECT((resultIntegerRepresentationSize*sizeof(long)), ((struct Z_template_Integer *)(Z_local_resultInteger))->Z_attribute_Integer_internalInteger);
		##;
	} -> resultInteger

	<deallocator
	##
		#define MAX(a,b) \
   			({ __typeof__ (a) _a = (a); \
       			__typeof__ (b) _b = (b); \
     			_a > _b ? _a : _b; })

		#define PRINT_PREFIX_THEN_SEGMENT_OF_SIZE(_prefix, _segment, _SegmentSize)\
		{\
			printf("%s:", _prefix);\
			int i;\
			for (i = 0; i< _SegmentSize; ++i)\
				printf("%ld,", _segment[i]);\
			printf("\n");\
		}

		#define PULL_INTEGER_REPRESENTATIONS_FOR_OPERATION\
			long* integerRepresentationForSelf = (long*)(injected_DATA_POINTER_WITH_DATA_OBJECT(((struct Z_template_Integer *)(Z_self))->Z_attribute_Integer_internalInteger));\
			size_t integerRepresentationSizeForSelf = (injected_DATA_SIZE_WITH_DATA_OBJECT(((struct Z_template_Integer *)(Z_self))->Z_attribute_Integer_internalInteger)) / sizeof(long);\
			long* integerRepresentationForOtherInteger = (long*)(injected_DATA_POINTER_WITH_DATA_OBJECT(((struct Z_template_Integer *)(Z_local_someOtherInteger))->Z_attribute_Integer_internalInteger));\
			size_t integerRepresentationSizeForOtherInteger = (injected_DATA_SIZE_WITH_DATA_OBJECT(((struct Z_template_Integer *)(Z_local_someOtherInteger))->Z_attribute_Integer_internalInteger)) / sizeof(long);
		
		#define ADD_INTEGER_MODULUS_OF_SEGMENTS_INTO_RESULT_WITH_RESULT_MODULUS_SIZE(_seg1, _seg2, _resSeg, _resSegSize)\
		{\
			int currentSegIndexPosition = 1;\
			long carry = 0;\
			int reachedEndOfSeg1 = 0!=0;\
			int reachedEndOfSeg2 = 0!=0;\
			int currentSizeOfResultingSegment = currentSegIndexPosition+2;\
			while (!reachedEndOfSeg1 || !reachedEndOfSeg2) {\
				if (_seg2[currentSegIndexPosition] == -1)\
					reachedEndOfSeg2 = 0==0;\
				if (_seg1[currentSegIndexPosition] == -1)\
					reachedEndOfSeg1 = 0==0;\
				long nextCarry = 0;\
				long seg1Number = reachedEndOfSeg1?0:(_seg1[currentSegIndexPosition]);\
				long seg2Number = reachedEndOfSeg2?0:(_seg2[currentSegIndexPosition]);\
				long resultNumber = seg1Number+seg2Number+carry;\
				if (resultNumber >= 10000) {\
					resultNumber -= 10000;\
					nextCarry = 1;\
				}\
				if (resultNumber != 0) {\
					currentSizeOfResultingSegment = currentSegIndexPosition+2;\
				}\
				_resSeg[currentSegIndexPosition] = resultNumber;\
				carry = nextCarry;\
				currentSegIndexPosition++;\
			}\
			_resSegSize = currentSizeOfResultingSegment;\
		}
			

		#define SUBTRACT_INTEGER_MODULUS_OF_SEGMENTS_INTO_RESULT_WITH_RESULT_MODULUS_SIZE(_seg1, _seg2, _resSeg, _resSegSize)\
		{\
			int currentSegIndexPosition = 1;\
			long carry = 0;\
			int reachedEndOfSeg2 = 0!=0;\
			int currentSizeOfResultingSegment = currentSegIndexPosition+2;\
			while (_seg1[currentSegIndexPosition] != -1) {\
				if (_seg2[currentSegIndexPosition] == -1)\
					reachedEndOfSeg2 = 0==0;\
				long nextCarry = 0;\
				long seg1Number = _seg1[currentSegIndexPosition];\
				long seg2Number = reachedEndOfSeg2?0:(_seg2[currentSegIndexPosition]);\
				long resultNumber = seg1Number - seg2Number + carry;\
				if (resultNumber < 0) {\
					resultNumber += 10000;\
					nextCarry = -1;\
				}\
				_resSeg[currentSegIndexPosition] = resultNumber;\
				if (resultNumber != 0) {\
					currentSizeOfResultingSegment = currentSegIndexPosition+2;\
				}\
				carry = nextCarry;\
				currentSegIndexPosition++;\
			}\
			_resSegSize = currentSizeOfResultingSegment;\
		}


		#define SEG2_IS_LARGER_IN_MAGNITUDE_WITH_SEG12_SEG12SIZE_AND_RESULT(_seg1, _seg2, _seg1Size, _seg2Size, _result)\
		{\
			if (_seg2Size > _seg1Size)\
				_result = (0==0);\
			else if (_seg2Size < _seg1Size)\
				_result = (0!=0);\
			else {\
				int segIndexPositionCurrent = (int)(_seg2Size-1);\
				int seg2IsLarger = 0!=0;\
				while (segIndexPositionCurrent >= 1) {\
					if (_seg2[segIndexPositionCurrent] > _seg1[segIndexPositionCurrent]) {\
						seg2IsLarger = 0==0;\
						break;\
					} else if (_seg2[segIndexPositionCurrent] < _seg1[segIndexPositionCurrent]) {\
						break;\
					}\
					segIndexPositionCurrent--;\
				}\
				_result = seg2IsLarger;\
			}\
		}

		#define injected_REVERSE_LONG_ARRAY_WITH_SIZE(_array, _size)\
			{int i; long temp; for (int i=0; i<((int)_size)/2; ++i) {temp = _array[i]; _array[i] = _array[_size-1-i]; _array[_size-1-i] = temp;}}

		#define injected_INTEGER_SET_WITH_INTEGER_OBJECT_AND_CONSTANT_INTEGER_REPRESENTATION(_integer, _constantInteger)\
			long* integerRepresentation = (long*)_constantInteger;\
			int integerRepresentationSegmentLength = 2;\
			while (integerRepresentation[integerRepresentationSegmentLength++] != -1);\
			size_t cIntegerDataLength = (sizeof(long))*((size_t)integerRepresentationSegmentLength);\
			injected_REVERSE_LONG_ARRAY_WITH_SIZE(((long *)(&integerRepresentation[1])), integerRepresentationSegmentLength-2);\
			injected_DATA_REALLOCATE_WITH_SIZE_AND_DATA_OBJECT(cIntegerDataLength, ((struct Z_template_Integer *)(_integer))->Z_attribute_Integer_internalInteger);\
			injected_DATA_COPY_WITH_SIZE_DATAFROM_AND_DATA_OBJECT(cIntegerDataLength, _constantInteger, ((struct Z_template_Integer *)(_integer))->Z_attribute_Integer_internalInteger)

		#define injected_DOUBLE_APPROXIMATION_OF_INTEGER_OBJECT_WITH_RESULT_DOUBLE(_integerObject, _doubleResult)\
			{\
				long* integerRepresentationForIntegerObject = (long*)(injected_DATA_POINTER_WITH_DATA_OBJECT(((struct Z_template_Integer *)(_integerObject))->Z_attribute_Integer_internalInteger));\
				_doubleResult = 0;\
				int integerRepresentationIndex = 1;\
				double currentBaseDouble = 1.0;\
				while (integerRepresentationForIntegerObject[integerRepresentationIndex] != -1) {\
					_doubleResult += currentBaseDouble*((double)(integerRepresentationForIntegerObject[integerRepresentationIndex]));\
					integerRepresentationIndex++;\
					currentBaseDouble = currentBaseDouble*10000.0;\
				}\
				_doubleResult = _doubleResult * ((double)(integerRepresentationForIntegerObject[0]));\
			}

		#define injected_LONG_APPROXIMATION_OF_INTEGER_OBJECT_WITH_RESULT_LONG(_integerObject, _longResult)\
			{\
				long* integerRepresentationForIntegerObject = (long*)(injected_DATA_POINTER_WITH_DATA_OBJECT(((struct Z_template_Integer *)(_integerObject))->Z_attribute_Integer_internalInteger));\
				_longResult = 0;\
				int integerRepresentationIndex = 1;\
				long currentBaseLong = 1;\
				while (integerRepresentationForIntegerObject[integerRepresentationIndex] != -1) {\
					_longResult += currentBaseLong*((long)(integerRepresentationForIntegerObject[integerRepresentationIndex]));\
					integerRepresentationIndex++;\
					currentBaseLong = currentBaseLong*10000;\
					if (integerRepresentationIndex >= 2) break;\
				}\
				_longResult = _longResult * ((double)(integerRepresentationForIntegerObject[0]));\
			}

	##
	

}







