


[CommandReader] (String) {
	~interface*{}
	++ exit *{} 							@ ;
	++ parseSourceFile *([String] path){}	@ + <file path>
	++ compileToFile *([String] path){}		@ ~ <compilation method> : <file path>
	++ invalidCommand *{}
	@+ renameUnstagedClassnames *([String] path){}
	@stageClasses
	@removeStagedClasses
	@removeUnstagedClasses
}

[Commands] (InputStream, CommandReader, Maybe, Byte, Debug, Boolean, String, Character, Loops, Variable, Data) 
	[InputStream] inputStream
	[Maybe<[Character]>] currentCharacter
{
	~ from *([InputStream] inputStream) {
		.inputStream = inputStream;
		.currentCharacter = \[Maybe<[Character]>]:asNothing;
		\:readNextCharacter;
	}

	++ readNext *([CommandReader] reader) {
		\:eatWhitespaceCharacters;
		\.currentCharacter:ifNothing (reader:exit);
		\.currentCharacter:ifIs *([Character] character) {
			[Boolean] exit = (\character:isSemicolon);
			\exit:ifTrue reader:exit;
			[Variable<[Boolean]>] validCommand = \[Variable<[Boolean]>]:as exit;
			[Boolean] parseSourceFile = (\character:isPlus);
			\parseSourceFile:ifTrue *{
				\reader:parseSourceFile (\:readNextFilePath);
				\validCommand:set (\[Boolean]:true);
			};
			[Boolean] compileToFile = (\character:isTilde);
			\compileToFile:ifTrue *{
				[String] compilationMethod = \:readNextString (*([Character]c)->\c:isAlphanumeric);
				\:eatWhitespaceCharacters;
				[Boolean] colonPresent = (\.currentCharacter:is (*([Character]c)->\c:isColon));
				\colonPresent:ifTrue *{
					\reader:compileToFile (\:readNextFilePath);
					\validCommand:set (\[Boolean]:true);
				};
			};
			[Boolean] invalidCommand = \[Boolean]:not (\validCommand:get);
			\invalidCommand:ifTrue *{
				\reader:invalidCommand;
				\:readNextCharacter;
			};
		};
	}

	- readNextCharacter *{
		.currentCharacter = \[Maybe<[Byte][Character]>]:map ([Character]:asASCII) (\.inputStream:readNextByte);
	}

	- readNextString *([[Character]->[Boolean]] inString) -> [String] {
		\:eatWhitespaceCharacters;
		[Data] asciiStringData = \[Data]:dataFromBytesWithByteProvider (*([[Byte]->] useByte) {
			\[Loops]:while (*->[Boolean]{
				[Variable<[Boolean]>] charcterInString = \[Variable<[Boolean]>]:as (\[Boolean]:false);
				\:readNextCharacter;
				\.currentCharacter:ifIs *([Character] character) {
					\charcterInString:set (\inString character);
				};
			} -> \charcterInString:get) *{
				\.currentCharacter:ifIs *([Character] character) {
					\useByte (\character:asASCIIByte);
				};
			};
		});
	} -> \[String]:stringWithASCIIDataRepresentationOfString asciiStringData

	- readNextFilePath *-> [String] {
	} -> \:readNextString *([Character] c) ->[Boolean] {
		} -> \[Boolean]:or (\[Boolean]:or (\[Boolean]:or (\[Boolean]:or (\c:isAlphanumeric) (\c:isFullstop)) (\c:isForwardslash)) (\c:isBackslash)) (\c:isUnderscore)

	- eatWhitespaceCharacters *{
		\[Loops]:while (*->[Boolean]{
			[Variable<[Boolean]>] isWhitespace = \[Variable<[Boolean]>]:as (\[Boolean]:false);
			\.currentCharacter:ifIs *([Character] character) {
				\isWhitespace:set (\character:isWhitespace);
			};
		} -> \isWhitespace:get) (:readNextCharacter);
	}
}

[Character :[Object]] (Byte, Boolean, Object, String, Data)
	[Byte] asciiByte
{
	~ asASCII *([Byte] asciiByte) {
		\::new;
		.asciiByte = asciiByte;
	}

	++ asString *->(\[String]:stringWithASCIIDataRepresentationOfString (\[Data]:dataFromBytesWithByteProvider (*([[Byte]->] useByte) {\useByte .asciiByte})))

	++ asASCIIByte *->[Byte]{} -> .asciiByte


	++ isSemicolon *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b3B))
	++ isPlus *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b2B))
	++ isUnderscore *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b5F))
	++ isBackslash *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b5C))
	++ isForwardslash *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b2F))
	++ isFullstop *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b2E))
	++ isColon *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b3A))
	++ isTilde *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b7E))
	++ isHash *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b23))
	++ isDollarSign *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b24))
	++ isBacktick *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b60))
	++ isAmpersand *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b26))
	++ isSingleApostrophe *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b27))
	++ isDash *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b2D))
	++ isArrowBracketOpen *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b3C))
	++ isArrowBracketClose *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b3E))
	++ isAsterisk *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b2A))
	++ isCaret *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b5E))
	++ isComma *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b2C))
	++ isCurlyBracketOpen *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b7B))
	++ isCurlyBracketClose *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b7D))
	++ isDoubleApostrophe *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b22))
	++ isPipe *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b7C))
	++ isStrudel *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b40))
	++ isEqualsSign *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b3D))
	++ isExclamationMark *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b21))
	++ isPercentSign *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b25))
	++ isQuestionMark *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b3F))
	++ isRoundBracketOpen *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b28))
	++ isRoundBracketClose *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b29))
	++ isSquareBracketOpen *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b5B))
	++ isSquareBracketClose *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b5D))

	++ isNewline *->[Boolean]{}->(\.asciiByte:equals (\[Byte]:as 0b0A))

	++ isAlphanumeric *->[Boolean] {
	} -> \[Boolean]:or (\[Boolean]:or (\.asciiByte:inclusiveBetween (\[Byte]:as 0b30) (\[Byte]:as 0b39)) (\.asciiByte:inclusiveBetween (\[Byte]:as 0b41) (\[Byte]:as 0b5A))) (\.asciiByte:inclusiveBetween (\[Byte]:as 0b61) (\[Byte]:as 0b7A))

	++ isWhitespace *->[Boolean] {
	} -> \[Boolean]:or (\.asciiByte:inclusiveBetween (\[Byte]:as 0b09) (\[Byte]:as 0b0D)) (\.asciiByte:equals (\[Byte]:as 0b20))
}



[Debug] (OutputStream, String, SystemInputOutput){
	:: log *([String] s){
		[OutputStream] out = \[SystemInputOutput]:stdout;
		\out:writeString s;
	}
}@\[Debug]:log (\[String]:as "false\n");




