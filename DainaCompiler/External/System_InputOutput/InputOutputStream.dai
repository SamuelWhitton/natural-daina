

@@

DataStream : [Object]
	:: streamConnectedToNullDevice [ -> [DataStream]]
	++ isConnectedToNullDevice [ -> [Boolean]]

OutputStream : [DataStream]
	:: outputStreamConnectedToNullDevice [ -> [OutputStream]]
	++ writeData [[Data] -> ]
	++ writeString [[String] -> ]
	
InputStream : [DataStream]
	:: inputStreamConnectedToNullDevice [ -> [InputStream]]
	++ readNextChunkOfData [ -> [Maybe<[Data]>]]
	++ readNextByte [ -> [Maybe<[Byte]>]]

@@


[DataStream : [Object]] (Object, Boolean) 
	[] internalDevicePointer
	[] internalFileDescriptor
{
	<header
	##
		#include <unistd.h>
	##

	~ streamConnectedToNullDevice *{
		\::new;
		.internalDevicePointer = ();
		.internalFileDescriptor = ();
	}

	++ isConnectedToNullDevice *()-> [Boolean] {
		[Boolean] isConnectedToNullDevice = \[Boolean]:false;
		<instant 
		##
			if (!injected_DATASTREAM_GET_DEVICE_POINTER_WITH_DATASTREAMOBJECT(Z_self) 
			&& !injected_DATASTREAM_GET_FILE_DESCRIPTOR_WITH_DATASTREAMOBJECT(Z_self)) {
				((struct Z_template_Boolean *)(Z_local_isConnectedToNullDevice))->Z_attribute_Boolean_internalBoolean = (void *)(0==0);
			}
		##;
	} -> isConnectedToNullDevice

	<deallocator
	##
		#define injected_DATASTREAM_SET_DEVICE_POINTER_WITH_DATASTREAMOBJECT_AND_DEVICEPOINTER(_dataStream, _devicePointer) \
		((struct Z_template_DataStream *)(_dataStream))->Z_attribute_DataStream_internalDevicePointer = _devicePointer;
		#define injected_DATASTREAM_SET_FILE_DESCRIPTOR_WITH_DATASTREAMOBJECT_AND_FILEDESCRIPTOR(_dataStream, _fd) \
		((struct Z_template_DataStream *)(_dataStream))->Z_attribute_DataStream_internalFileDescriptor = (void*)((long)_fd);

		#define injected_DATASTREAM_GET_DEVICE_POINTER_WITH_DATASTREAMOBJECT(_dataStream) \
		(((struct Z_template_DataStream *)(_dataStream))->Z_attribute_DataStream_internalDevicePointer)
		#define injected_DATASTREAM_GET_FILE_DESCRIPTOR_WITH_DATASTREAMOBJECT(_dataStream) \
		(int)((long)(((struct Z_template_DataStream *)(_dataStream))->Z_attribute_DataStream_internalFileDescriptor))

	##
}


[OutputStream : [DataStream]] (DataStream, Data, String, Integer) 
{
	~ outputStreamConnectedToNullDevice *() {
		\::streamConnectedToNullDevice;
	}

	++ writeData *([Data] dataToWrite) {
		[] dataObjectPointer = dataToWrite;
		<instant
		##
			void *fileStream = injected_DATASTREAM_GET_DEVICE_POINTER_WITH_DATASTREAMOBJECT(Z_self);
			if (fileStream) {
				fwrite(injected_DATA_POINTER_WITH_DATA_OBJECT(Z_local_dataObjectPointer), 1, injected_DATA_SIZE_WITH_DATA_OBJECT(Z_local_dataObjectPointer), fileStream);
			} else {
				int fileDescriptor = injected_DATASTREAM_GET_FILE_DESCRIPTOR_WITH_DATASTREAMOBJECT(Z_self);
				if (fileDescriptor)
					write(fileDescriptor, injected_DATA_POINTER_WITH_DATA_OBJECT(Z_local_dataObjectPointer), injected_DATA_SIZE_WITH_DATA_OBJECT(Z_local_dataObjectPointer));
			}
		##;
	}

	++ writeString *([String] stringToWrite) {
		\:writeData (\stringToWrite:asciiDataRepresentationOfString);
	}

	++ writeInteger *([Integer] integerToWrite) {
		\:writeString (\[String]:stringRepresentationOfInteger integerToWrite);
	}
}


[InputStream : [DataStream]] (DataStream, Data, Byte, Maybe, String, CoreFlow, Boolean, Variable, Conjecture, ControlFlow) 
{

	<header
	##
		#define injected_READ_BYTES_WITH_DATASTREAMOBJECT_NUMBEROFBYTESTOREAD_INPUTBUFFER_RETURNEDBYTESREAD(_dataStreamObject, _numBytesToRead, _inputBuffer, _resturnedBytesRead)\
		{\
			_resturnedBytesRead = -1;\
			FILE *fileDevicePointer = injected_DATASTREAM_GET_DEVICE_POINTER_WITH_DATASTREAMOBJECT(_dataStreamObject);\
			if (fileDevicePointer) {\
				_resturnedBytesRead = fread(_inputBuffer, 1, _numBytesToRead, fileDevicePointer);\
			} else {\
				int fileDescriptor = injected_DATASTREAM_GET_FILE_DESCRIPTOR_WITH_DATASTREAMOBJECT(_dataStreamObject);\
				_resturnedBytesRead = read(fileDescriptor, _inputBuffer, _numBytesToRead);\
			}\
		}
	##

	~ inputStreamConnectedToNullDevice *() {
		\::streamConnectedToNullDevice;
	}
	
	++ readNextChunkOfData *() -> [Maybe<[Data]>] {
		[Maybe<[Data]>] maybeSomeDataThatWasRead = \[Maybe<[Data]>]:nothing;
		[Data] possiblyData = \[Data]:emptyData;
		<instant
		##
			#define INPUT_BUTFFER_BYTE_LENGTH 8192
			char inputDataBuffer[INPUT_BUTFFER_BYTE_LENGTH];
			//FILE *fileDevicePointer = injected_DATASTREAM_GET_DEVICE_POINTER_WITH_DATASTREAMOBJECT(Z_self);
			//if (fileDevicePointer) {
				long readBytes;// = fread(inputDataBuffer, 1, INPUT_BUTFFER_BYTE_LENGTH, fileDevicePointer);
				injected_READ_BYTES_WITH_DATASTREAMOBJECT_NUMBEROFBYTESTOREAD_INPUTBUFFER_RETURNEDBYTESREAD(Z_self, INPUT_BUTFFER_BYTE_LENGTH, inputDataBuffer, readBytes);
				if (readBytes > 0) {
					injected_DATA_REALLOCATE_WITH_SIZE_AND_DATA_OBJECT(readBytes, Z_local_possiblyData);
					injected_DATA_COPY_WITH_SIZE_DATAFROM_AND_DATA_OBJECT(readBytes, inputDataBuffer, Z_local_possiblyData);
		##;
		maybeSomeDataThatWasRead = \[Maybe<[Data]>]:just possiblyData;
		<instant
		##
			}
			//}
		##;
	} -> maybeSomeDataThatWasRead

	++ maybeReadNextChunkOfData *() -> [Maybe<[Data]>] {
		[Maybe<[Data]>] maybeSomeDataThatWasRead = \[Maybe<[Data]>]:nothing;
		[Data] possiblyData = \[Data]:emptyData;
		<instant
		##
			#define INPUT_BUTFFER_BYTE_LENGTH 8192
			char inputDataBuffer[INPUT_BUTFFER_BYTE_LENGTH];
			//FILE *fileDevicePointer = injected_DATASTREAM_GET_DEVICE_POINTER_WITH_DATASTREAMOBJECT(Z_self);
			//if (fileDevicePointer) {
				long readBytes;// = fread(inputDataBuffer, 1, INPUT_BUTFFER_BYTE_LENGTH, fileDevicePointer);
				injected_READ_BYTES_WITH_DATASTREAMOBJECT_NUMBEROFBYTESTOREAD_INPUTBUFFER_RETURNEDBYTESREAD(Z_self, INPUT_BUTFFER_BYTE_LENGTH, inputDataBuffer, readBytes);
				if (readBytes > 0) {
					injected_DATA_REALLOCATE_WITH_SIZE_AND_DATA_OBJECT(readBytes, Z_local_possiblyData);
					injected_DATA_COPY_WITH_SIZE_DATAFROM_AND_DATA_OBJECT(readBytes, inputDataBuffer, Z_local_possiblyData);
		##;
		maybeSomeDataThatWasRead = \[Maybe<[Data]>]:just possiblyData;
		<instant
		##
			}
			//}
		##;
	} -> maybeSomeDataThatWasRead

	++ maybeParseDataAsStringUntilNewlineOrEndOfFile *()->[Maybe<[String]>] {
		[Conjecture] conjectureThatSomeDataHasBeenRead = \[Conjecture]:propose;
		[Data] nextLineAsData = \[Data]:dataFromBytesWithByteProvider *([[Byte]->] provideByte) {
			\[CoreFlow]:repeatUntilStopped *([->] endOfLineOrEndOfFileReachedSoStop) {
				[Maybe<[Byte]>] maybeNextByte = \:readNextByte;
				\maybeNextByte:ifJust *([Byte] nextByte) {
					[Boolean] nextByteIsEndOfLine = (\nextByte:sameAsByte (\[Byte]:newByte 0b0A));
					\conjectureThatSomeDataHasBeenRead:declareTrue;
					\nextByteIsEndOfLine:ifTrue endOfLineOrEndOfFileReachedSoStop;
					\nextByteIsEndOfLine:ifFalse *{\provideByte nextByte}
				};
				\maybeNextByte:ifNothing *{
					\endOfLineOrEndOfFileReachedSoStop
				}
			}
		};
		[Maybe<[String]>] maybeDataAsString = \[ControlFlow<[Maybe<[String]>]>]:selectWithSelectorOrDefault *([[Maybe<[String]>]->] selectDataAsString) {
    			[Boolean] someDataHasBeenRead = \conjectureThatSomeDataHasBeenRead:isTrue;
    			\someDataHasBeenRead:ifTRUE *{
    				\selectDataAsString (\[Maybe<[String]>]:asJust (\[String]:stringWithASCIIDataRepresentationOfString nextLineAsData))
    			}
			} (*->\[Maybe<[String]>]:asNothing);
	} -> maybeDataAsString


	++ readNextByte *() -> [Maybe<[Byte]>] {
		@[] dataObjectPointer = dataToWrite;
		[Maybe<[Byte]>] maybeAByteThatWasRead = \[Maybe<[Byte]>]:nothing;
		[Byte] possiblyAByte = (\[Byte]:newByte 0b00);
		<instant
		##
			char inputByte;
			//FILE *fileDevicePointer = injected_DATASTREAM_GET_DEVICE_POINTER_WITH_DATASTREAMOBJECT(Z_self);
			//if (fileDevicePointer) {
				int readBytes;
				injected_READ_BYTES_WITH_DATASTREAMOBJECT_NUMBEROFBYTESTOREAD_INPUTBUFFER_RETURNEDBYTESREAD(Z_self, 1, &inputByte, readBytes);
				int success = (1 == readBytes); //fread(&inputByte, 1, 1, fileDevicePointer)
				if (success) {
					((struct Z_template_Byte *)(Z_local_possiblyAByte))->Z_attribute_Byte_internalByte = (void *)((long)inputByte);
		##;
		maybeAByteThatWasRead = \[Maybe<[Byte]>]:just possiblyAByte;
		<instant
		##
			}
			//}
		##;
	} -> maybeAByteThatWasRead

	++ maybeReadNextByte *() -> [Maybe<[Byte]>] {
		@[] dataObjectPointer = dataToWrite;
		[Maybe<[Byte]>] maybeAByteThatWasRead = \[Maybe<[Byte]>]:nothing;
		[Byte] possiblyAByte = (\[Byte]:newByte 0b00);
		<instant
		##
			char inputByte;
			//FILE *fileDevicePointer = injected_DATASTREAM_GET_DEVICE_POINTER_WITH_DATASTREAMOBJECT(Z_self);
			//if (fileDevicePointer) {
				int readBytes;
				injected_READ_BYTES_WITH_DATASTREAMOBJECT_NUMBEROFBYTESTOREAD_INPUTBUFFER_RETURNEDBYTESREAD(Z_self, 1, &inputByte, readBytes);
				int success = (1 == readBytes); //fread(&inputByte, 1, 1, fileDevicePointer)
				if (success) {
					((struct Z_template_Byte *)(Z_local_possiblyAByte))->Z_attribute_Byte_internalByte = (void *)((long)inputByte);
		##;
		maybeAByteThatWasRead = \[Maybe<[Byte]>]:just possiblyAByte;
		<instant
		##
			}
			//}
		##;
	} -> maybeAByteThatWasRead
}






