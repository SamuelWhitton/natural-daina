

[Tokeniser : [Object]] (
		Object, 
		Sequence, 
		TokenisingRule,
		ControlFlow,
		Maybe,
		Or,
		ParticleSequenceProcessor,
		DainaSourceFileCharacter,
		DainaToken
	)
		[Sequence<[TokenisingRule<[DainaSourceFileCharacter][DainaToken]>]>] sequenceOfTokenisingRulesInDecendingOrderOfGreedyness
{
	~ tokeniserWithSequenceOfTokenisingRulesInDecendingOrderOfGreedyness *([Sequence<[TokenisingRule<[DainaSourceFileCharacter][DainaToken]>]>] sequenceOfTokenisingRulesInDecendingOrderOfGreedyness){
		\::newObject;
		.sequenceOfTokenisingRulesInDecendingOrderOfGreedyness = sequenceOfTokenisingRulesInDecendingOrderOfGreedyness;
	}

	++ tokeniseParticlesIntoTokensAndRemainingUntokenisedParticles *([Sequence<[DainaSourceFileCharacter]>] givenParticleSequence) -> [Sequence<[Or<[DainaToken][DainaSourceFileCharacter]>]>] { 
		[ParticleSequenceProcessor<[DainaSourceFileCharacter][DainaToken]>] processorForGivenParticleSequence = \[ParticleSequenceProcessor<[DainaSourceFileCharacter][DainaToken]>]:newProcessorOfParticleSequenceWithTokenisingRulesInDecendingOrderOfGreedyness givenParticleSequence (.sequenceOfTokenisingRulesInDecendingOrderOfGreedyness);
		[Sequence<[Or<[DainaToken][DainaSourceFileCharacter]>]>] tokensAndRemainingUntokenisedParticles = \[ControlFlow<[Sequence<[Or<[DainaToken][DainaSourceFileCharacter]>]>]>]:constructRecursively *([->[Sequence<[Or<[DainaToken][DainaSourceFileCharacter]>]>]] constructRestOfTokenOrUnprocessedParticleSequence) -> [Sequence<[Or<[DainaToken][DainaSourceFileCharacter]>]>] {
			[Sequence<[Or<[DainaToken][DainaSourceFileCharacter]>]>] tokensAndRemainingUntokenisedParticles = \[ControlFlow<[Sequence<[Or<[DainaToken][DainaSourceFileCharacter]>]>]>]:selectWithSelectorOrDefault *([[Sequence<[Or<[DainaToken][DainaSourceFileCharacter]>]>]->] selectTokensAndRemainingUntokenisedParticles) {
				[Maybe<[Or<[DainaToken][DainaSourceFileCharacter]>]>] maybeNextTokenOrUnprocessedParticle = \processorForGivenParticleSequence:maybeProcessNextTokenOrReturnNextUnprocessedParticle;
				\maybeNextTokenOrUnprocessedParticle:ifJust *([Or<[DainaToken][DainaSourceFileCharacter]>] nextTokenOrUnprocessedParticle) {
					\selectTokensAndRemainingUntokenisedParticles (\[Sequence<[Or<[DainaToken][DainaSourceFileCharacter]>]>]:sequenceWithFirstAndRestOfSequenceProvider (nextTokenOrUnprocessedParticle) constructRestOfTokenOrUnprocessedParticleSequence);
				}
			} (*->\[Sequence<[Or<[DainaToken][DainaSourceFileCharacter]>]>]:emptySequence)
		} -> tokensAndRemainingUntokenisedParticles
	} -> tokensAndRemainingUntokenisedParticles
}

@@
[Tokeniser<PARTICLE [Object], TOKEN [Object]> : [Object]] (
		Object, 
		Sequence, 
		TokenisingRule,
		ControlFlow,
		Maybe,
		Or,
		ParticleSequenceProcessor
	)
		[Sequence<[TokenisingRule<[&PARTICLE][&TOKEN]>]>] sequenceOfTokenisingRulesInDecendingOrderOfGreedyness
{
	~ tokeniserWithSequenceOfTokenisingRulesInDecendingOrderOfGreedyness *([Sequence<[TokenisingRule<[&PARTICLE][&TOKEN]>]>] sequenceOfTokenisingRulesInDecendingOrderOfGreedyness){
		\::newObject;
		.sequenceOfTokenisingRulesInDecendingOrderOfGreedyness = sequenceOfTokenisingRulesInDecendingOrderOfGreedyness;
	}

	++ tokeniseParticlesIntoTokensAndRemainingUntokenisedParticles *([Sequence<[&PARTICLE]>] givenParticleSequence) -> [Sequence<[Or<[&TOKEN][&PARTICLE]>]>] { 
		[ParticleSequenceProcessor<[&PARTICLE][&TOKEN]>] processorForGivenParticleSequence = \[ParticleSequenceProcessor<[&PARTICLE][&TOKEN]>]:newProcessorOfParticleSequenceWithTokenisingRulesInDecendingOrderOfGreedyness givenParticleSequence (.sequenceOfTokenisingRulesInDecendingOrderOfGreedyness);
		[Sequence<[Or<[&TOKEN][&PARTICLE]>]>] tokensAndRemainingUntokenisedParticles = \[ControlFlow<[Sequence<[Or<[&TOKEN][&PARTICLE]>]>]>]:constructRecursively *([->[Sequence<[Or<[&TOKEN][&PARTICLE]>]>]] constructRestOfTokenOrUnprocessedParticleSequence) -> [Sequence<[Or<[&TOKEN][&PARTICLE]>]>] {
			[Sequence<[Or<[&TOKEN][&PARTICLE]>]>] tokensAndRemainingUntokenisedParticles = \[ControlFlow<[Sequence<[Or<[&TOKEN][&PARTICLE]>]>]>]:selectWithSelectorOrDefault *([[Sequence<[Or<[&TOKEN][&PARTICLE]>]>]->] selectTokensAndRemainingUntokenisedParticles) {
				[Maybe<[Or<[&TOKEN][&PARTICLE]>]>] maybeNextTokenOrUnprocessedParticle = \processorForGivenParticleSequence:maybeProcessNextTokenOrReturnNextUnprocessedParticle;
				\maybeNextTokenOrUnprocessedParticle:ifJust *([Or<[&TOKEN][&PARTICLE]>] nextTokenOrUnprocessedParticle) {
					\selectTokensAndRemainingUntokenisedParticles (\[Sequence<[Or<[&TOKEN][&PARTICLE]>]>]:sequenceWithFirstAndRestOfSequenceProvider (nextTokenOrUnprocessedParticle) constructRestOfTokenOrUnprocessedParticleSequence);
				}
			} (*->\[Sequence<[Or<[&TOKEN][&PARTICLE]>]>]:emptySequence)
		} -> tokensAndRemainingUntokenisedParticles
	} -> tokensAndRemainingUntokenisedParticles
}

@@

[ParticleSequenceProcessor<PARTICLE [Object], TOKEN [Object]> : [Object]] (
		Object,
		Sequence,
		TokenisingRule,
		ParticleStream,
		Maybe,
		ControlFlow,
		Sequences,
		Or,
		TokeniserDecision,
		MonitoredParticleStream,
		Boolean
	) -> (
			Tokeniser
		)
	[MonitoredParticleStream<[&PARTICLE]>] monitoredStreamOfUnprocessedParticles
	[Sequence<[TokenisingRule<[&PARTICLE][&TOKEN]>]>] tokenisingRulesInDecendingOrderOfGreedyness
{
	~ newProcessorOfParticleSequenceWithTokenisingRulesInDecendingOrderOfGreedyness *([Sequence<[&PARTICLE]>] particleSequence, [Sequence<[TokenisingRule<[&PARTICLE][&TOKEN]>]>] tokenisingRulesInDecendingOrderOfGreedyness) {
		\::newObject;
		.monitoredStreamOfUnprocessedParticles = \[MonitoredParticleStream<[&PARTICLE]>]:newMonitoredParticleStreamWithParticleSequence particleSequence;
		.tokenisingRulesInDecendingOrderOfGreedyness = tokenisingRulesInDecendingOrderOfGreedyness;
	}

	++ maybeProcessNextTokenOrReturnNextUnprocessedParticle *()-> [Maybe<[Or<[&TOKEN][&PARTICLE]>]>] {
		\.monitoredStreamOfUnprocessedParticles:resetMonitor;
		[Maybe<[&TOKEN]>] maybeNextToken = \[Sequences<[TokenisingRule<[&PARTICLE][&TOKEN]>][Maybe<[&TOKEN]>]>]:foldSequenceWithInitialResultAndOperationToFoldResultIntoSequenceElement (.tokenisingRulesInDecendingOrderOfGreedyness) (\[Maybe<[&TOKEN]>]:asNothing) tokenByApplyingNextTokenisingRuleIfAPreviousTokenisingRuleWasNotApplied;
		[Boolean] streamWasAccessedByOneOrMoreTokenisingRules = \.monitoredStreamOfUnprocessedParticles:particleStreamWasAccessedSinceLastMonitorReset;
		[Maybe<[Or<[&TOKEN][&PARTICLE]>]>] maybeNextTokenOrUnprocessedParticle = (\[ControlFlow<[Maybe<[Or<[&TOKEN][&PARTICLE]>]>]>]:selectWithSelectorOrDefault selectNextTokenIfAvaliableOrUnprocessedParticleIfStreamWasNotAccessed defaultToNothing)
			!{
				[[[Maybe<[Or<[&TOKEN][&PARTICLE]>]>]->]->] selectNextTokenIfAvaliableOrUnprocessedParticleIfStreamWasNotAccessed = *([[Maybe<[Or<[&TOKEN][&PARTICLE]>]>]->] selectNextTokenOrUnprocessedParticle) {
					\maybeNextToken:ifJust *([&TOKEN] nextToken) {
						\selectNextTokenOrUnprocessedParticle (\[Maybe<[Or<[&TOKEN][&PARTICLE]>]>]:asJust (\[Or<[&TOKEN][&PARTICLE]>]:asLeft nextToken));
					};
					\streamWasAccessedByOneOrMoreTokenisingRules:ifTRUE reprocessNextTokenOrSelectNextUnprocessedParticle;
					\streamWasAccessedByOneOrMoreTokenisingRules:ifFALSE *{
						\maybeNextToken:ifNothing maybeSelectNextUnprocessedParticle
					}	
				}	!{
						[->] maybeSelectNextUnprocessedParticle = *{
							[Maybe<[&PARTICLE]>] maybeNextUnprocessedParticle = \.monitoredStreamOfUnprocessedParticles:maybeTakeNext;
							\maybeNextUnprocessedParticle:ifJust *([&PARTICLE] nextUnprocessedParticle) {
								\selectNextTokenOrUnprocessedParticle (\[Maybe<[Or<[&TOKEN][&PARTICLE]>]>]:asJust (\[Or<[&TOKEN][&PARTICLE]>]:asRight nextUnprocessedParticle));
							}
						};
						[->] reprocessNextTokenOrSelectNextUnprocessedParticle = *{
							\selectNextTokenOrUnprocessedParticle \:maybeProcessNextTokenOrReturnNextUnprocessedParticle;
						};
					};
				[->[Maybe<[Or<[&TOKEN][&PARTICLE]>]>]] defaultToNothing = *->\[Maybe<[Or<[&TOKEN][&PARTICLE]>]>]:asNothing;
			}
	}	!{
			[[Maybe<[&TOKEN]>][TokenisingRule<[&PARTICLE][&TOKEN]>]->[Maybe<[&TOKEN]>]] 
				tokenByApplyingNextTokenisingRuleIfAPreviousTokenisingRuleWasNotApplied 
				= *([Maybe<[&TOKEN]>] maybeTokenFromPreviousTokenisingRuleThatWasApplied, [TokenisingRule<[&PARTICLE][&TOKEN]>] nextTokenisingRule) -> [Maybe<[&TOKEN]>] {
					[Maybe<[&TOKEN]>] maybeNextToken = (\[ControlFlow<[Maybe<[&TOKEN]>]>]:selectWithSelectorOrDefault selectTokenOfPreviousTokenisingRuleIfExists maybeProduceTokenByApplyingNextTokenisingRule) 
						!{
							[[[Maybe<[&TOKEN]>]->]->] selectTokenOfPreviousTokenisingRuleIfExists = *([[Maybe<[&TOKEN]>]->] selectTokenOfPreviousTokenisingRule) {
								\maybeTokenFromPreviousTokenisingRuleThatWasApplied:ifJust *([&TOKEN] tokenFromPreviousTokenisingRuleThatWasApplied) {
										\selectTokenOfPreviousTokenisingRule \[Maybe<[&TOKEN]>]:asJust tokenFromPreviousTokenisingRuleThatWasApplied;
									};
							};
							[->[Maybe<[&TOKEN]>]] maybeProduceTokenByApplyingNextTokenisingRule = *() -> [Maybe<[&TOKEN]>] {
								[TokeniserDecision<[&TOKEN]>] tokeniserDecisionFromApplyingNextTokenisingRule = \nextTokenisingRule:applyRuleToParticleStreamProducingATokeniserDecision .monitoredStreamOfUnprocessedParticles;
							} -> \tokeniserDecisionFromApplyingNextTokenisingRule:maybeGetTokenProducedByThisDecision
						}
				} -> maybeNextToken
		}
	-> maybeNextTokenOrUnprocessedParticle
}

[MonitoredParticleStream<PARTICLE [Object]> : [ParticleStream<[&PARTICLE]>]] (
		Boolean,
		ParticleStream,
		Object,
		Sequence,
		ControlFlow,
		Maybe,
		Variable
	) -> (
		ParticleSequenceProcessor
	)
	[Variable<[Boolean]>] particleStreamHasBeenAccessedSinceLastMonitorReset
{
	~ newMonitoredParticleStreamWithParticleSequence *([Sequence<[&PARTICLE]>] particleSequence) {
		\::streamWithParticleProvider provideMaybeNextParticleInParticleSequence;
		.particleStreamHasBeenAccessedSinceLastMonitorReset = particleStreamHasBeenAccessedSinceLastMonitorReset;
	}	!{
			[Variable<[Boolean]>] particleStreamHasBeenAccessedSinceLastMonitorReset = \[Variable<[Boolean]>]:as (\[Boolean]:FALSE);
			[Variable<[Sequence<[&PARTICLE]>]>] currentParticlesThatHaveNotYetBeenProvided = \[Variable<[Sequence<[&PARTICLE]>]>]:as (particleSequence);
			[->[Maybe<[&PARTICLE]>]] provideMaybeNextParticleInParticleSequence = *() -> [Maybe<[&PARTICLE]>] {
				\particleStreamHasBeenAccessedSinceLastMonitorReset:set (\[Boolean]:TRUE);
				[Maybe<[&PARTICLE]>] maybeNextParticleInParticleSequence = (\[ControlFlow<[Maybe<[&PARTICLE]>]>]:selectWithSelectorOrDefault provideNextParticleIfAvaliable defaultToNothing)
					!{
						[->[Maybe<[&PARTICLE]>]] defaultToNothing = *->\[Maybe<[&PARTICLE]>]:asNothing;
						[[[Maybe<[&PARTICLE]>]->]->] provideNextParticleIfAvaliable = *([[Maybe<[&PARTICLE]>]->] provideNextParticle) {
							[Sequence<[&PARTICLE]>] particlesThatHaveNotYetBeenProvided = \currentParticlesThatHaveNotYetBeenProvided:get;
							\particlesThatHaveNotYetBeenProvided:ifFirstAndRestOfSequence provideFirstParticleInSequence
								!{
									[[&PARTICLE][Sequence<[&PARTICLE]>]->] provideFirstParticleInSequence = *([&PARTICLE] firstPartileInSequence, [Sequence<[&PARTICLE]>] restOfParticleSequence) {
										\provideNextParticle \[Maybe<[&PARTICLE]>]:asJust firstPartileInSequence;
										\currentParticlesThatHaveNotYetBeenProvided:set restOfParticleSequence;
									}
								}
						}	
					}
			} -> maybeNextParticleInParticleSequence
		}

	++ resetMonitor *{
		\.particleStreamHasBeenAccessedSinceLastMonitorReset:set (\[Boolean]:FALSE);
	}

	++ particleStreamWasAccessedSinceLastMonitorReset *->(\.particleStreamHasBeenAccessedSinceLastMonitorReset:get)
}





