
[DainaCommandLineCommandParser : [Object]] (
		String, 
		Object, 
		DainaCommandLineCommandReceiver, 
		DainaCommandStrings, 
		Maybe,  
		DainaCommandLineParsingAction, 
		ValidDainaCommandsToParse, 
		DainaCommandDescriptionStrings,
		ControlFlow,
		Boolean
	)
	[ValidDainaCommandsToParse] validDainaCommandsToParse
{
	~ newDainaCommandLineCommandParser *() {
		\::newObject;
		.validDainaCommandsToParse = validDainaCommandsToParse
	} 	!{
			[ValidDainaCommandsToParse] validDainaCommandsToParse = \[ValidDainaCommandsToParse]:emptyListOfValidDainaCommandsToParse;
			\validDainaCommandsToParse:addValidDainaCommandForCommandStringAndParsingActionAndDescriptionOfCommand (\[DainaCommandStrings]:EXIT_COMMAND) (\[DainaCommandLineParsingAction]:parseExitCommand) (\[DainaCommandDescriptionStrings]:EXIT_COMMAND);
			\validDainaCommandsToParse:addValidDainaCommandForCommandStringAndParsingActionAndDescriptionOfCommand (\[DainaCommandStrings]:PARSE_DAINA_SOURCE_FILE_IN_EXPOSED_NAMESPACE) (\[DainaCommandLineParsingAction]:parseCommandToParseDainaSourceFileInExposedNamespace) (\[DainaCommandDescriptionStrings]:PARSE_DAINA_SOURCE_FILE_IN_EXPOSED_NAMESPACE);
			\validDainaCommandsToParse:addValidDainaCommandForCommandStringAndParsingActionAndDescriptionOfCommand (\[DainaCommandStrings]:PARSE_DAINA_SOURCE_FILE_IN_EXPOSED_AND_PRIVATE_NAMESPACE) (\[DainaCommandLineParsingAction]:parseCommandToParseDainaSourceFileInExposedAndPrivateNamespace) (\[DainaCommandDescriptionStrings]:PARSE_DAINA_SOURCE_FILE_IN_EXPOSED_AND_PRIVATE_NAMESPACE);
			\validDainaCommandsToParse:addValidDainaCommandForCommandStringAndParsingActionAndDescriptionOfCommand (\[DainaCommandStrings]:PARSE_DAINA_SOURCE_FILE_IN_PRIVATE_NAMESPACE) (\[DainaCommandLineParsingAction]:parseCommandToParseDainaSourceFileInPrivateNamespace) (\[DainaCommandDescriptionStrings]:PARSE_DAINA_SOURCE_FILE_IN_PRIVATE_NAMESPACE);
			\validDainaCommandsToParse:addValidDainaCommandForCommandStringAndParsingActionAndDescriptionOfCommand (\[DainaCommandStrings]:ANALYSE_AND_SYNTHESISE_SYNTAX_TREE) (\[DainaCommandLineParsingAction]:parseCommandToAnalyseAndSynthesiseSyntaxTree) (\[DainaCommandDescriptionStrings]:ANALYSE_AND_SYNTHESISE_SYNTAX_TREE);
			\validDainaCommandsToParse:addValidDainaCommandForCommandStringAndParsingActionAndDescriptionOfCommand (\[DainaCommandStrings]:COMPILE_INTO_JAVA_WITHIN_DIRECTORY) (\[DainaCommandLineParsingAction]:parseCommandToCompileIntoJavaWithinDirectory) (\[DainaCommandDescriptionStrings]:COMPILE_INTO_JAVA_WITHIN_DIRECTORY);
			\validDainaCommandsToParse:addValidDainaCommandForCommandStringAndParsingActionAndDescriptionOfCommand (\[DainaCommandStrings]:COMPILE_INTO_C_WITHIN_DIRECTORY) (\[DainaCommandLineParsingAction]:parseCommandToCompileIntoCWithinDirectory) (\[DainaCommandDescriptionStrings]:COMPILE_INTO_C_WITHIN_DIRECTORY);
		}

	++ parseNextCommandAndSendToReceiverWithCommandStringSegmentProvider *([DainaCommandLineCommandReceiver] dainaCommandReceiver, [->[String]] commandStringSegmentProvider) {
		[String] nextCommandString = \commandStringSegmentProvider;
		[Boolean] nextCommandStringIsEmpty = \nextCommandString:isEqualTo (\[String]:newStringFromLiteral "");
		\nextCommandStringIsEmpty:ifFalse *{
			[Maybe<[DainaCommandLineParsingAction]>] maybeParsingActionForCommandString = \.validDainaCommandsToParse:maybeParsingActionForCommandStringIfValidDainaCommand nextCommandString;
			[DainaCommandLineParsingAction] parsingActionForCommandString = \[ControlFlow<[DainaCommandLineParsingAction]>]:selectWithSelectorOrDefault maybeParsingActionForCommandString:ifJust ([DainaCommandLineParsingAction]:parseInvalidCommand);
			\parsingActionForCommandString:performActionWithCommandStringSegmentProviderAndThenSendCommandToReceiver commandStringSegmentProvider dainaCommandReceiver;
		}
	}	

	++ getUsageDescriptionOfValidDainaCommands *() ->[String]{}->\.validDainaCommandsToParse:getUsageDescriptionOfValidDainaCommands
}

[DainaCommandStrings] (String) -> (DainaCommandLineCommandParser)
{
	:: EXIT_COMMAND *->(\[String]:newString "exit")
	:: PARSE_DAINA_SOURCE_FILE_IN_EXPOSED_NAMESPACE *->(\[String]:newString "parse dainasource exposed")
	:: PARSE_DAINA_SOURCE_FILE_IN_EXPOSED_AND_PRIVATE_NAMESPACE *->(\[String]:newString "parse dainasource bridging")
	:: PARSE_DAINA_SOURCE_FILE_IN_PRIVATE_NAMESPACE *->(\[String]:newString "parse dainasource private")
	:: ANALYSE_AND_SYNTHESISE_SYNTAX_TREE *->(\[String]:newString "synthesise")
	:: COMPILE_INTO_JAVA_WITHIN_DIRECTORY *->(\[String]:newString "compileinto java")
	:: COMPILE_INTO_C_WITHIN_DIRECTORY *->(\[String]:newString "compileinto c")
} 

[DainaCommandDescriptionStrings] (String) -> (DainaCommandLineCommandParser)
{
	:: EXIT_COMMAND *->(\[String]:newString "daina compiler will exit")
	:: PARSE_DAINA_SOURCE_FILE_IN_EXPOSED_NAMESPACE *->(\[String]:newString "next file path input will be parsed as a Daina source file and integrated into the current syntax tree in the exposed namespace and any errors will be provided")
	:: PARSE_DAINA_SOURCE_FILE_IN_EXPOSED_AND_PRIVATE_NAMESPACE *->(\[String]:newString "next input will be private namespace, successive file path input will be parsed as a Daina source file and integrated into the current syntax tree in the exposed + given private namespace and any errors will be provided")
	:: PARSE_DAINA_SOURCE_FILE_IN_PRIVATE_NAMESPACE *->(\[String]:newString "next input will be private namespace, successive file path input will be parsed as a Daina source file and integrated into the current syntax tree in the given private namespace and any errors will be provided")
	:: ANALYSE_AND_SYNTHESISE_SYNTAX_TREE *->(\[String]:newString "current syntax tree will be synthesised and any errors will be provided")
	:: COMPILE_INTO_JAVA_WITHIN_DIRECTORY *->(\[String]:newString "next input is where the Java source will be constructed from the current syntax tree and any errors will be provided")
	:: COMPILE_INTO_C_WITHIN_DIRECTORY *->(\[String]:newString "next input is where the C source will be constructed from the current syntax tree and any errors will be provided")
} 

[ValidDainaCommandsToParse : [Object]] (DainaCommandLineParsingAction, Object, Variable, String, Mapping, Maybe) -> (DainaCommandLineCommandParser)
	[Mapping<[String][DainaCommandLineParsingAction]>] mappingOfValidCommandStringToParsingAction
	[Variable<[String]>] usageDescriptionOfAllValidCommands
{
	~ emptyListOfValidDainaCommandsToParse *{
		\::newObject;
		.usageDescriptionOfAllValidCommands =\[Variable<[String]>]:as (\[String]:newStringFromLiteral "valid Daina commands are:");
		.mappingOfValidCommandStringToParsingAction = \[Mapping<[String][DainaCommandLineParsingAction]>]:newEmptyMapping;
	}

	++ getUsageDescriptionOfValidDainaCommands *->\.usageDescriptionOfAllValidCommands:get

	++ maybeParsingActionForCommandStringIfValidDainaCommand*([String] commandStringInQuestion) -> [Maybe<[DainaCommandLineParsingAction]>] {
	} -> (\.mappingOfValidCommandStringToParsingAction:maybeRetriveMappedValueWithKey commandStringInQuestion)

	++ addValidDainaCommandForCommandStringAndParsingActionAndDescriptionOfCommand *([String] commandString, [DainaCommandLineParsingAction] parsingAction, [String] descriptionOfCommand) {
		\.mappingOfValidCommandStringToParsingAction:mapKeyToValue commandString parsingAction;
		\.usageDescriptionOfAllValidCommands:set (\currentDescriptionOfAllValidCommands:stringByAppendingString (\newLineAndTab:stringByAppendingString usageDescriptionOfCommand));
	}	!{
			[String] currentDescriptionOfAllValidCommands = \.usageDescriptionOfAllValidCommands:get; 
			[String] newLineAndTab = \[String]:newStringFromLiteral "\n\t";
			[String] colonAndSpace = \[String]:newStringFromLiteral ": ";
			[String] usageDescriptionOfCommand = \commandString:stringByAppendingString (\colonAndSpace:stringByAppendingString descriptionOfCommand);
		}
}

[DainaCommandLineParsingAction : [Object]] (Object, String, DainaCommandLineCommandReceiver, DainaNamespaceReference) -> (DainaCommandLineCommandParser, ValidDainaCommandsToParse)
	[[->[String]][DainaCommandLineCommandReceiver]->] parsingActionToParseCommandWithCommandStringSegmentProviderAndThenSendCommandToReceiver
{
	~ newParsingActionUsingParsingActionToParseCommandWithCommandStringSegmentProviderAndThenSendCommandToReceiver *([[->[String]][DainaCommandLineCommandReceiver]->] parsingActionToParseCommandWithCommandStringSegmentProviderAndThenSendCommandToReceiver) {
		\::newObject;
		.parsingActionToParseCommandWithCommandStringSegmentProviderAndThenSendCommandToReceiver = parsingActionToParseCommandWithCommandStringSegmentProviderAndThenSendCommandToReceiver
	}

	++ performActionWithCommandStringSegmentProviderAndThenSendCommandToReceiver *([->[String]] commandStringSegmentProvider, [DainaCommandLineCommandReceiver] dainaCommandReceiver) {
		\.parsingActionToParseCommandWithCommandStringSegmentProviderAndThenSendCommandToReceiver commandStringSegmentProvider dainaCommandReceiver
	}

	~ parseCommandToParseDainaSourceFileInExposedNamespace *{
		\::newParsingActionUsingParsingActionToParseCommandWithCommandStringSegmentProviderAndThenSendCommandToReceiver
			*([->[String]] getNextCommandStringSegment, [DainaCommandLineCommandReceiver] dainaCommandLineCommandReceiver) {
				[DainaNamespaceReference] exposedNamespace = \[DainaNamespaceReference]:referToExposedNamespace;
				[String] dainaSourceFilePath = (\getNextCommandStringSegment);
				\dainaCommandLineCommandReceiver:receiveCommandToParseDainaSourceFileWithPathAndNamespaceSelection dainaSourceFilePath exposedNamespace;
			}
	}

	~ parseCommandToParseDainaSourceFileInExposedAndPrivateNamespace *{
		\::newParsingActionUsingParsingActionToParseCommandWithCommandStringSegmentProviderAndThenSendCommandToReceiver
			*([->[String]] getNextCommandStringSegment, [DainaCommandLineCommandReceiver] dainaCommandLineCommandReceiver) {
				[DainaNamespaceReference] privateAndExposedNamespace = \[DainaNamespaceReference]:referToExposedNamespaceAndPrivateNamespaceWithName (\getNextCommandStringSegment);
				[String] dainaSourceFilePath = (\getNextCommandStringSegment);
				\dainaCommandLineCommandReceiver:receiveCommandToParseDainaSourceFileWithPathAndNamespaceSelection dainaSourceFilePath privateAndExposedNamespace;
			}
	}

	~ parseCommandToParseDainaSourceFileInPrivateNamespace *{
		\::newParsingActionUsingParsingActionToParseCommandWithCommandStringSegmentProviderAndThenSendCommandToReceiver
			*([->[String]] getNextCommandStringSegment, [DainaCommandLineCommandReceiver] dainaCommandLineCommandReceiver) {
				[DainaNamespaceReference] privateNamespace = \[DainaNamespaceReference]:referToPrivateNamespaceWithName (\getNextCommandStringSegment);
				[String] dainaSourceFilePath = (\getNextCommandStringSegment);
				\dainaCommandLineCommandReceiver:receiveCommandToParseDainaSourceFileWithPathAndNamespaceSelection dainaSourceFilePath privateNamespace;
			}
	}

	~ parseExitCommand *{
		\::newParsingActionUsingParsingActionToParseCommandWithCommandStringSegmentProviderAndThenSendCommandToReceiver
			*([->[String]] getNextCommandStringSegment, [DainaCommandLineCommandReceiver] dainaCommandLineCommandReceiver) {
				\dainaCommandLineCommandReceiver:receiveExitCommand
			}
	}

	~ parseCommandToAnalyseAndSynthesiseSyntaxTree *{
		\::newParsingActionUsingParsingActionToParseCommandWithCommandStringSegmentProviderAndThenSendCommandToReceiver
			*([->[String]] getNextCommandStringSegment, [DainaCommandLineCommandReceiver] dainaCommandLineCommandReceiver) {
				\dainaCommandLineCommandReceiver:receiveCommandToAnalyseAndSynthesiseSyntaxTree
			}
	}

	~ parseCommandToCompileIntoJavaWithinDirectory *{
		\::newParsingActionUsingParsingActionToParseCommandWithCommandStringSegmentProviderAndThenSendCommandToReceiver
			*([->[String]] getNextCommandStringSegment, [DainaCommandLineCommandReceiver] dainaCommandLineCommandReceiver) {
				\dainaCommandLineCommandReceiver:receiveCommandToCompileIntoJavaWithinDirectory (\getNextCommandStringSegment)
			}
	}

	~ parseCommandToCompileIntoCWithinDirectory *{
		\::newParsingActionUsingParsingActionToParseCommandWithCommandStringSegmentProviderAndThenSendCommandToReceiver
			*([->[String]] getNextCommandStringSegment, [DainaCommandLineCommandReceiver] dainaCommandLineCommandReceiver) {
				\dainaCommandLineCommandReceiver:receiveCommandToCompileIntoCWithinDirectory (\getNextCommandStringSegment)
			}
	}

	~ parseInvalidCommand *{
		\::newParsingActionUsingParsingActionToParseCommandWithCommandStringSegmentProviderAndThenSendCommandToReceiver
			*([->[String]] getNextCommandStringSegment, [DainaCommandLineCommandReceiver] dainaCommandLineCommandReceiver) {
				\dainaCommandLineCommandReceiver:receiveInvalidCommand
			}
	}

}





