
[DainaCommandLineInterface : [Object]] (
		Object, 
		DainaStatusReporter, 
		InputStream, 
		OutputStream, 
		SystemInputOutput,
		String, 
		Variable, 
		ControlFlow, 
		DainaCommandReceiver, 
		Boolean, 
		DainaCommandLineCommandParser,
		DainaCommandLineCommandResponder, 
		DainaCommandLineCommandReceiver,
		GeneralDainaStatus, 
		InformationStatus,
		Maybe
	)
	[InputStream] commandInputStream
	[DainaStatusReporter] dainaStatusReporter
	[DainaCommandLineCommandParser] dainaCommandParser
{
	:: newDainaCommandLineInterfaceReadyToReceiveCommands *() -> [DainaCommandLineInterface] {
		[DainaCommandLineInterface] newCommandInterface = \[DainaCommandLineInterface]:___asdasd;
		@\newCommandInterface:_reportTheAvaliableValidComandsToCommandInterface;
	} -> newCommandInterface

	~ ___asdasd *() {
		\::newObject;
		.dainaCommandParser = \[DainaCommandLineCommandParser]:newDainaCommandLineCommandParser;
		.commandInputStream = commandInputStream;
		.dainaStatusReporter = \[DainaStatusReporter]:statusReporterWithOutputStreamToReceiveStatus statusOutputStream;
	} !{
			[InputStream] commandInputStream = \[SystemInputOutput]:stdinInputStream;
			[OutputStream] statusOutputStream = \[SystemInputOutput]:stdoutOutputStream;
		}

	++ processNextUserCommandAndSendingValidCommandsToCommandReceiver *([DainaCommandLineCommandReceiver] givenCommandReceiver) {
		\.dainaCommandParser:parseNextCommandAndSendToReceiverWithCommandStringSegmentProvider commandReponderThatWillSendValidCommandsToGivenCommandReceiver commandStringSegmentProvider;
	}	!{
			[->[String]] commandStringSegmentProvider = :getNextCommandStringInput;
			[DainaCommandLineCommandResponder] commandReponderThatWillSendValidCommandsToGivenCommandReceiver = (\[DainaCommandLineCommandResponder]:newDainaCommandResponderWithCommandReceiverToReceiveValidCommandsAndResponseForInvalidCommand givenCommandReceiver invalidCommandResponse)
				!{
					[->] invalidCommandResponse = *{
						\.dainaStatusReporter:reportStatus (\[GeneralDainaStatus]:INVALID_DAINA_COMMAND_RECEIVED);
						\:_reportTheAvaliableValidComandsToCommandInterface;
					}
				}
		}

	++ _reportTheAvaliableValidComandsToCommandInterface *{
		\.dainaStatusReporter:reportStatus (\[InformationStatus]:INFORMATION_WITH_INFORMATION_STRING UsageDescriptionOfValidDainaCommands)
			!{
				[String] UsageDescriptionOfValidDainaCommands = \.dainaCommandParser:getUsageDescriptionOfValidDainaCommands
			};
	}

	- getNextCommandStringInput *()->[String] {
		[String] nextCommandStringInput = \[ControlFlow<[String]>]:selectWithSelectorOrDefault *([[String]->] selectNextCommandStringInput) {
				[Maybe<[String]>] maybeNextLineOfDataFromCommandInputStream = \.commandInputStream:maybeParseDataAsStringUntilNewlineOrEndOfFile;
				\maybeNextLineOfDataFromCommandInputStream:ifJust *([String] s){ \selectNextCommandStringInput s };
			} (*->\[String]:newStringFromLiteral "")
	} -> nextCommandStringInput

	++ provideDainaStatusReporterWhichReportsToThisCommandInterface *-> .dainaStatusReporter
}


[DainaCommandLineCommandResponder : [DainaCommandLineCommandReceiver]] (
		DainaCommandLineCommandReceiver,
		String, 
		GeneralDainaStatus, 
		DainaCommandReceiver,
		DainaStatus, 
		DainaNamespaceReference
	) -> (
			DainaCommandLineInterface
		)
	[->] invalidCommandResponse
	[DainaCommandLineCommandReceiver] commandReceiverToSendValidCommandsTo
{
	~ newDainaCommandResponderWithCommandReceiverToReceiveValidCommandsAndResponseForInvalidCommand *([DainaCommandLineCommandReceiver] commandReceiverToSendValidCommandsTo, [->] invalidCommandResponse) {
		\::newDainaCommandLineCommandReceiverWithDainaCommandReceiverToReceiveDainaCommands commandReceiverToSendValidCommandsTo;
		.commandReceiverToSendValidCommandsTo = commandReceiverToSendValidCommandsTo;
		.invalidCommandResponse = invalidCommandResponse;
	}

	|++ receiveInvalidCommand *{
		\.invalidCommandResponse;
	}

	|++ receiveExitCommand *{
		\.commandReceiverToSendValidCommandsTo:receiveExitCommand;
	}
}









