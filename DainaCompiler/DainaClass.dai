



[DainaClass :[Object]] (
			Object, 
			Parser, 
			List,
			Loops,
			Token,
			Boolean,
			Maybe,
			String,
			Error, M, O,
			DainaDependancyStructure,
			DainaExpression,
			Variable,
			DainaIdentifier,
			DainaGenericDeclarationList,
			DainaType,
			DainaObjectDeclaration,
			DainaClassMethod,
			DainaCompilerInjection,

			Debug
		)
	@[] isEntryPoint
	[DainaDependancyStructure] dependancyStructure
	[Maybe<[DainaExpression]>] entryPointMethod
	[DainaIdentifier] className
{
	:: parseClasses *([Parser] parser) -> [List<[DainaClass]>] {
		[List<[DainaClass]>] classes = \[List<[DainaClass]>]:empty;
		\[Loops]:until *([->] stop) {
			\[O]:ifElse (\[Token]:equals (\parser:token) \[Token]:squareBracketOpen) *{
				\classes:append (\[DainaClass]:parse parser);
				\[O]:ifElse (\parser:hasErrors) stop *{};
			} *{	
				\[O]:ifElse (\[Token]:equals (\parser:token) \[Token]:EOF) *{} *{
					\parser:addError (\[Error]:expectingClassAtTopLevel (\parser:position));
				};
				\stop;
			};
		};

		@@\[Loops]:while (*->[Boolean]{[Maybe<[Token]>] token = \parser:token;}->\token:is (*([]a)->\[Boolean]:true)) *{
			[Maybe<[Token]>] maybeToken = \parser:token;
			\maybeToken:ifIs *([Token] token) {
				@\[Debug]:log (\token:asDebugString);
				@\[Debug]:log (\[String]:as "\n");
			};
			\parser:gotoNextToken;
		}@@
	} -> classes

	~ @@-+-@@ parse *([Parser] parser) {
		[DainaDependancyStructure] dependancyStructure = \[DainaDependancyStructure]:base;
		[Variable<[Maybe<[DainaExpression]>]>] entryPointMethod = \[Variable<[Maybe<[DainaExpression]>]>]:as (\[Maybe<[DainaExpression]>]:nothing);
		[DainaIdentifier] className = \[DainaIdentifier]:base;

		\parser:gotoNextToken;
		\[O]:ifElse (\[Token]:equals (\parser:token) \[Token]:squareBracketClose) *{
			\parser:gotoNextToken;
			\dependancyStructure:parse parser;
			\[O]:ifElse (\[Token]:equals (\parser:token) \[Token]:curlyBracketOpen) *{
				\parser:gotoNextToken;
				\[O]:ifElse (\[DainaExpression]:isFirstToken (\parser:token)) *{
					[DainaExpression] entryPointExpression = \[DainaExpression]:base;
					\entryPointExpression:parse parser;
					\[O]:ifElse (\[Token]:equals (\parser:token) \[Token]:curlyBracketClose) *{
						\parser:gotoNextToken;
					} *{	
						\parser:addError (\[Error]:expectingClosingBracketForClassBody (\parser:position));
					};
				} *{
					\parser:addError (\[Error]:expectingEntryPointMethod (\parser:position));	
				};
			} *{
				\parser:addError (\[Error]:expectingBodyOfClass (\parser:position));	
			};
		} *{	
			\[O]:ifElse (\[DainaIdentifier]:isFirstToken (\parser:token)) *{
				\className:parse parser;
			} *{
				\parser:addError (\[Error]:expectingClassName (\parser:position));	
			};
			
		};
		.dependancyStructure = dependancyStructure;
		.entryPointMethod = \entryPointMethod:get;
		.className = className;
		\::new;
	}
}


[DainaDependancyStructure :[Object]] (
			Object, 
			Parser, 
			List,
			Loops,
			Token,
			Boolean,
			Maybe,
			String,
			Error, M, O,

			Debug
		)
{
	~ base *{
		\::new;
	}

	++ parse *([Parser] parser) {
		

		
	}
}

[DainaExpression :[Object]] (
			Object, 
			Parser, 
			List,
			Loops,
			Token,
			Boolean,
			Maybe,
			String,
			Error, M, O,

			Debug
		)
{
	:: isFirstToken *([Token] token) -> [Boolean] {
	} -> \[Boolean]:false@(\[Token]:equals token \[Token]:squareBracketOpen)

	~ base *{
		\::new;
	}

	++ parse *([Parser] parser) {
		

		
	}
}

[DainaIdentifier :[Object]] (
			Object, 
			Parser, 
			List,
			Loops,
			Token,
			Boolean,
			Maybe,
			String, Variable,
			Error, M, O,

			Debug
		)
	@[Variable<[Maybe<[String]>]>]
{
	:: isFirstToken *([Token] token) -> [Boolean] {
		[Variable<[Boolean]>] isIdentifier = \[Variable<[Boolean]>]:as \[Boolean]:false;
		\token:ifIdentifier *([String] s) {
			\isIdentifier:set \[Boolean]:true;
		};
	} -> (\isIdentifier:get)

	~ base *{
		\::new;
	}

	++ parse *([Parser] parser) {
		@@[Token] identifierToken = \parser:token;
		[Variable<[Boolean]>] isIdentifier = \[Variable<[Boolean]>]:as \[Boolean]:false;
		\identifierToken:ifIdentifier *([String] s) {
			\isIdentifier:set \[Boolean]:true;
		};@@


		\[O]:ifElse (\[DainaIdentifier]:isFirstToken (\parser:token)) *{
			\parser:gotoNextToken;
		} *{
			\parser:addError (\[Error]:expectingIdentifier (\parser:position));	
		};
	}
}


DainaGenericDeclarationList,
			DainaType,
			DainaObjectDeclaration,
			DainaClassMethod,
			DainaCompilerInjection,




