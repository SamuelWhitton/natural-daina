[DainaCommandInterface : [Object]] (Object, DainaStatusReporter, InputStream, OutputStream, SystemInputOutput,
									String, Variable, ControlFlow, DainaCommandReceiver, Boolean, DainaCommandParser,
									DainaCommandResponder, GeneralDainaStatus)
	[InputStream] commandInputStream
	[DainaStatusReporter] dainaStatusReporter
	[DainaCommandParser] dainaCommandParser
{

	~ newDainaCommandInterface *() {
		\::newObject;
		.dainaCommandParser = \[DainaCommandParser]:newDainaCommandParser;
		.commandInputStream = commandInputStream;
		.dainaStatusReporter = \[DainaStatusReporter]:statusReporterWithOutputStreamToReceiveStatus statusOutputStream;
	} !{
			[InputStream] commandInputStream = \[SystemInputOutput]:stdinInputStream;
			[OutputStream] statusOutputStream = \[SystemInputOutput]:stdoutOutputStream;
		}

	++ processNextUserCommandAndSendingValidCommandsToCommandReceiver *([DainaCommandReceiver] givenCommandReceiver) {
		\.dainaCommandParser:parseNextCommandAndSendToReceiverWithCommandStringSegmentProvider commandReponderThatWillSendValidCommandsToGivenCommandReceiver commandStringSegmentProvider;
	}	!{
			[->[String]] commandStringSegmentProvider = :getNextCommandStringInput;
			[DainaCommandResponder] commandReponderThatWillSendValidCommandsToGivenCommandReceiver = \[DainaCommandResponder]:newDainaCommandResponderWithStatusReporterToRespondToAndCommandReceiverToSendValidCommandsTo .dainaStatusReporter givenCommandReceiver;
		}

	- getNextCommandStringInput *()->[String] {} -> \.commandInputStream:parseDataAsStringUntilNewlineOrEndOfFile

	++ provideDainaStatusReporterWhichReportsToThisCommandInterface *-> .dainaStatusReporter
}


[DainaCommandResponder : [DainaCommandReceiver]] (DainaCommandReceiver, String, GeneralDainaStatus, DainaStatusReporter, DainaStatus) -> (DainaCommandInterface)
	[DainaCommandReceiver] commandReceiverToSendValidCommandsTo
	[DainaStatusReporter] statusReporterToRespondTo
{
	~ newDainaCommandResponderWithStatusReporterToRespondToAndCommandReceiverToSendValidCommandsTo *([DainaStatusReporter] statusReporterToRespondTo, [DainaCommandReceiver] commandReceiverToSendValidCommandsTo) {
		\::newDainaCommandReceiver;
		.commandReceiverToSendValidCommandsTo = commandReceiverToSendValidCommandsTo;
		.statusReporterToRespondTo = statusReporterToRespondTo;
	}

	|++ receiveInvalidCommand *{
		\.statusReporterToRespondTo:reportStatus (\[GeneralDainaStatus]:INVALID_DAINA_COMMAND_RECEIVED);
	}

	|++ receiveCommandToParseDainaSourceFileWithPath *([String] dainaSourceFilePath) {
		\.commandReceiverToSendValidCommandsTo:receiveCommandToParseDainaSourceFileWithPath dainaSourceFilePath;
	}

	|++ receiveCommandToAnalyseAndSynthesiseSyntaxTree *{
		\.commandReceiverToSendValidCommandsTo:receiveCommandToAnalyseAndSynthesiseSyntaxTree;
	}

	|++ receiveCommandToCompileToJavaInDirectory *([String] javaCompilationDirectory) {
		\.commandReceiverToSendValidCommandsTo:receiveCommandToCompileToJavaInDirectory javaCompilationDirectory;
	}

	|++ receiveCommandToCompileToCInDirectory *([String] cCompilationDirectory) {
		\.commandReceiverToSendValidCommandsTo:receiveCommandToCompileToCInDirectory cCompilationDirectory;
	}
}









