
[DainaCommandInterface : [Object]] (
		Object, 
		DainaStatusReporter, 
		InputStream, 
		OutputStream, 
		SystemInputOutput,
		String, 
		Variable, 
		ControlFlow, 
		DainaCommandReceiver, 
		Boolean, 
		DainaCommandParser,
		DainaCommandResponder, 
		GeneralDainaStatus, 
		InformationStatus
	)
	[InputStream] commandInputStream
	[DainaStatusReporter] dainaStatusReporter
	[DainaCommandParser] dainaCommandParser
{
	:: newDainaCommandInterfaceReadyToReceiveCommands *() -> [DainaCommandInterface] {
		[DainaCommandInterface] newCommandInterface = \[DainaCommandInterface]:___asdasd;
		\newCommandInterface:_reportTheAvaliableValidComandsToCommandInterface;
	} -> newCommandInterface

	~ ___asdasd *() {
		\::newObject;
		.dainaCommandParser = \[DainaCommandParser]:newDainaCommandParser;
		.commandInputStream = commandInputStream;
		.dainaStatusReporter = \[DainaStatusReporter]:statusReporterWithOutputStreamToReceiveStatus statusOutputStream;
	} !{
			[InputStream] commandInputStream = \[SystemInputOutput]:stdinInputStream;
			[OutputStream] statusOutputStream = \[SystemInputOutput]:stdoutOutputStream;
		}

	++ processNextUserCommandAndSendingValidCommandsToCommandReceiver *([DainaCommandReceiver] givenCommandReceiver) {
		\.dainaCommandParser:parseNextCommandAndSendToReceiverWithCommandStringSegmentProvider commandReponderThatWillSendValidCommandsToGivenCommandReceiver commandStringSegmentProvider;
	}	!{
			[->[String]] commandStringSegmentProvider = :getNextCommandStringInput;
			[DainaCommandResponder] commandReponderThatWillSendValidCommandsToGivenCommandReceiver = (\[DainaCommandResponder]:newDainaCommandResponderWithCommandReceiverToSendValidCommandsToAndResponseForInvalidCommand givenCommandReceiver invalidCommandResponse)
				!{
					[->] invalidCommandResponse = *{
						\.dainaStatusReporter:reportStatus (\[GeneralDainaStatus]:INVALID_DAINA_COMMAND_RECEIVED);
						\:_reportTheAvaliableValidComandsToCommandInterface;
					}
				}
		}

	++ _reportTheAvaliableValidComandsToCommandInterface *{
		\.dainaStatusReporter:reportStatus (\[InformationStatus]:INFORMATION_WITH_INFORMATION_STRING UsageDescriptionOfValidDainaCommands)
			!{
				[String] UsageDescriptionOfValidDainaCommands = \.dainaCommandParser:getUsageDescriptionOfValidDainaCommands
			};
	}

	- getNextCommandStringInput *()->[String] {} -> \.commandInputStream:parseDataAsStringUntilNewlineOrEndOfFile

	++ provideDainaStatusReporterWhichReportsToThisCommandInterface *-> .dainaStatusReporter
}


[DainaCommandResponder : [DainaCommandReceiver]] (
		DainaCommandReceiver, 
		String, 
		GeneralDainaStatus, 
		DainaStatus, 
		DainaNamespaceReference
	) -> (
			DainaCommandInterface
		)
	[DainaCommandReceiver] commandReceiverToSendValidCommandsTo
	[->] invalidCommandResponse
{
	~ newDainaCommandResponderWithCommandReceiverToSendValidCommandsToAndResponseForInvalidCommand *([DainaCommandReceiver] commandReceiverToSendValidCommandsTo, [->] invalidCommandResponse) {
		\::newDainaCommandReceiver;
		.commandReceiverToSendValidCommandsTo = commandReceiverToSendValidCommandsTo;
		.invalidCommandResponse = invalidCommandResponse;
	}

	|++ receiveInvalidCommand *{
		\.invalidCommandResponse;
	}

	|++ receiveCommandToParseDainaSourceFileWithPathAndNamespaceSelection *([String] dainaSourceFilePath, [DainaNamespaceReference] dainaNamespaceSelection){
		\.commandReceiverToSendValidCommandsTo:receiveCommandToParseDainaSourceFileWithPathAndNamespaceSelection dainaSourceFilePath dainaNamespaceSelection;
	}

	|++ receiveCommandToAnalyseAndSynthesiseSyntaxTree *{
		\.commandReceiverToSendValidCommandsTo:receiveCommandToAnalyseAndSynthesiseSyntaxTree;
	}

	|++ receiveCommandToCompileIntoJavaWithinDirectory *([String] javaCompilationDirectory) {
		\.commandReceiverToSendValidCommandsTo:receiveCommandToCompileIntoJavaWithinDirectory javaCompilationDirectory;
	}

	|++ receiveCommandToCompileIntoCWithinDirectory *([String] cCompilationDirectory) {
		\.commandReceiverToSendValidCommandsTo:receiveCommandToCompileIntoCWithinDirectory cCompilationDirectory;
	}
}









