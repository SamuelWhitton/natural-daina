
@tokeniser used like this to patch issue with current compielr
[DainaTokeniser : [Tokeniser]] (
		Tokeniser, 
		Sequence, 
		TokenisingRule,
		Or,
		DainaToken,
		DainaNamespace,
		DainaTokens,
		DainaSourceFileCharacter,
		DainaStatusReporter,
		DainaSourceFilePosition,
		String,
		Natural,
		Sequences,
		ControlFlow,
		DainaSourceCharacterSet,
		ParticleStream,
		DainaSourceCharacterSets,
		Byte,
		TokeniserDecision,
		Maybe,
		Boolean,
		Variable,
		Data,
		DainaIdentifier
	)
{
	~ dainaTokeniserWithDainaStatusReporterAndNamespace *([DainaStatusReporter] dainaStatusReporter, [DainaNamespace] namespace){
		\::tokeniserWithSequenceOfTokenisingRulesInDecendingOrderOfGreedyness sequenceOfDainaTokenisingRulesInDecendingOrderOfGreedyness;
	}	!{
			[Sequence<[TokenisingRule<[DainaSourceFileCharacter][DainaToken]>]>] sequenceOfDainaTokenisingRulesInDecendingOrderOfGreedyness = \[Sequences<[TokenisingRule<[DainaSourceFileCharacter][DainaToken]>]>]:sequenceWithIterator
			(*([[TokenisingRule<[DainaSourceFileCharacter][DainaToken]>]->] provideNextTokenisingRule) {
				\provideNextTokenisingRule IGNORE_ALL_WHITESPACE;
				\provideNextTokenisingRule TOKENISE_IDENTIFIERS;
			}	!{
					[TokenisingRule<[DainaSourceFileCharacter][DainaToken]>] IGNORE_ALL_WHITESPACE = (\[TokenisingRule<[DainaSourceFileCharacter][DainaToken]>]:newTokeniserRuleWithTokeniserDecisionFromParticleStream *([ParticleStream<[DainaSourceFileCharacter]>] characterStream) -> [TokeniserDecision<[DainaToken]>] {
							\takeCharactersFromStreamWhichAreInSetWithReceiverAndMaybeReturnFirstCharacterPosition characterStream WHITESPACE_CHARACTERS *([] _) {};
						} -> \[TokeniserDecision<[DainaToken]>]:dontProduceAnyToken);

					[TokenisingRule<[DainaSourceFileCharacter][DainaToken]>] TOKENISE_IDENTIFIERS = (\[TokenisingRule<[DainaSourceFileCharacter][DainaToken]>]:newTokeniserRuleWithTokeniserDecisionFromParticleStream *([ParticleStream<[DainaSourceFileCharacter]>] characterStream) -> [TokeniserDecision<[DainaToken]>] {
							[String] nextIdentifierAsString = \[String]:stringWithASCIIDataRepresentationOfString (\[Data]:dataFromBytesWithByteProvider takeAndProvideEachSuccessiveASCIICharacterInIdentifier);
							[TokeniserDecision<[DainaToken]>] decisionToProduceIdentifierTokenIfThereWasOne = (\[ControlFlow<[TokeniserDecision<[DainaToken]>]>]:selectWithSelectorOrDefault selectTokeniserDecisionToProduceIdentifierTokenIfThereWasOne (*->\[TokeniserDecision<[DainaToken]>]:dontProduceAnyToken))
								!{
									[[[TokeniserDecision<[DainaToken]>]->]->] selectTokeniserDecisionToProduceIdentifierTokenIfThereWasOne = *([[TokeniserDecision<[DainaToken]>]->] selectDecision) {
										\provideStartPositionOfIdentifierIfExists *([DainaSourceFilePosition] startPositionOfIdentifier) {
											[DainaIdentifier] nextDainaIdentifier = \namespace:dainaIdentifierRepresentedByStringWithinNamespace nextIdentifierAsString;
											\selectDecision (\[TokeniserDecision<[DainaToken]>]:produceGivenToken (\[DainaTokens]:IDENTIFIER_TOKEN_AT_POSITION_AS_DAINA_IDENTIFIER startPositionOfIdentifier nextDainaIdentifier))
										}
									}
								}
						}	!{
								[Variable<[Maybe<[DainaSourceFilePosition]>]>] currentMaybePositionOfFirstCharacterInIdentifier = \[Variable<[Maybe<[DainaSourceFilePosition]>]>]:as (\[Maybe<[DainaSourceFilePosition]>]:asNothing);
								[[[Byte]->]->] takeAndProvideEachSuccessiveASCIICharacterInIdentifier = *([[Byte]->] provideNextIdentifierASCIICharacter){
									[Maybe<[DainaSourceFilePosition]>] maybeFirstCharacterPosition = \takeCharactersFromStreamWhichAreInSetWithReceiverAndMaybeReturnFirstCharacterPosition characterStream IDENTIFIER_CHARACTERS *([DainaSourceFileCharacter] nextCharacterInIdentifier) {
										\provideNextIdentifierASCIICharacter \nextCharacterInIdentifier:byteRepresentingCharacter;
									};
									\currentMaybePositionOfFirstCharacterInIdentifier:set maybeFirstCharacterPosition;
								};
								[[[DainaSourceFilePosition]->]->] provideStartPositionOfIdentifierIfExists = *([[DainaSourceFilePosition]->] provideStartPositionOfIdentifier){
									[Maybe<[DainaSourceFilePosition]>] maybePositionOfFirstCharacterInIdentifier = \currentMaybePositionOfFirstCharacterInIdentifier:get;
									\maybePositionOfFirstCharacterInIdentifier:ifJust provideStartPositionOfIdentifier;
								}
							}
						 -> decisionToProduceIdentifierTokenIfThereWasOne)
							
				})	!{
						[DainaSourceCharacterSet] WHITESPACE_CHARACTERS = \[DainaSourceCharacterSets]:WHITESPACE_CHARACTERS;
						[DainaSourceCharacterSet] IDENTIFIER_CHARACTERS = \[DainaSourceCharacterSets]:IDENTIFIER_CHARACTERS;
						
						[[ParticleStream<[DainaSourceFileCharacter]>][DainaSourceCharacterSet][[DainaSourceFileCharacter]->]->[Maybe<[DainaSourceFilePosition]>]] takeCharactersFromStreamWhichAreInSetWithReceiverAndMaybeReturnFirstCharacterPosition = *([ParticleStream<[DainaSourceFileCharacter]>] stream, [DainaSourceCharacterSet] set, [[DainaSourceFileCharacter]->] receiveCharacter) -> [Maybe<[DainaSourceFilePosition]>] {
							[Maybe<[DainaSourceFilePosition]>] maybeFirstCharacterPosition = \[ControlFlow<[Maybe<[DainaSourceFilePosition]>]>]:selectWithSelectorOrDefault selectAndReceiveNextCharacterIfInSet (*->\[Maybe<[DainaSourceFilePosition]>]:asNothing);
							\[ControlFlow]:repeatWhile checkIfNextCharacterIsInSet receiveNextCharacter;
						}	!{
								[->[Boolean]] checkIfNextCharacterIsInSet = (*->\set:maybeCharacterIsInSet (\stream:maybePeekAtNext));

								[->] receiveNextCharacter = *{
									[Maybe<[DainaSourceFileCharacter]>] maybeNextCharacterInStreamWhichIsInSet = \stream:maybeTakeNext;
									\maybeNextCharacterInStreamWhichIsInSet:ifJust *([DainaSourceFileCharacter] nextCharacterInStreamWhichIsInSet) {
										\receiveCharacter nextCharacterInStreamWhichIsInSet;
									}
								}

								[[[Maybe<[DainaSourceFilePosition]>]->]->] selectAndReceiveNextCharacterIfInSet = *([[Maybe<[DainaSourceFilePosition]>]->] selectCharacter) {
									[Boolean] nextCharacterIsInSet = \checkIfNextCharacterIsInSet;
									\nextCharacterIsInSet:ifTRUE *{
										[Maybe<[DainaSourceFileCharacter]>] maybeNextCharacterInStreamWhichIsInSet = \stream:maybeTakeNext;
										\maybeNextCharacterInStreamWhichIsInSet:ifJust *([DainaSourceFileCharacter] nextCharacterInStreamWhichIsInSet) {
											\selectCharacter (\[Maybe<[DainaSourceFilePosition]>]:asJust (\nextCharacterInStreamWhichIsInSet:positionInSourceFile));
											\receiveCharacter nextCharacterInStreamWhichIsInSet;
										}
									}
								}
							}
						-> maybeFirstCharacterPosition
					}
		}

	++ tokeniseDainaSourceFileCharactersIntoSequenceOfDainaTokens *([Sequence<[DainaSourceFileCharacter]>] sourceFileCharacters) -> [Sequence<[DainaToken]>] {
		[Sequence<[Or<[DainaToken][DainaSourceFileCharacter]>]>] tokensAndRemainingUntokenisedParticles = \:tokeniseParticlesIntoTokensAndRemainingUntokenisedParticles sourceFileCharacters;
		[Sequence<[DainaToken]>] sequenceOfTokensRepresentingSourceFileCharacters = (\[Sequences<[Or<[DainaToken][DainaSourceFileCharacter]>][DainaToken]>]:sequenceByMappingTransformationOverSequence transformRemainingUntokenisedCharactersIntoUnknownTokens tokensAndRemainingUntokenisedParticles)
			!{
				[DainaSourceFilePosition] _badPositionDueToLanguageLimitation = \[DainaSourceFilePosition]:firstCharacterPositionInDainaSourceFileWithFilePathAndFirstLineContent (\[String]:stringFromLiteral "XXX") (\[String]:stringFromLiteral "XXX");
				[[Or<[DainaToken][DainaSourceFileCharacter]>]->[DainaToken]] transformRemainingUntokenisedCharactersIntoUnknownTokens = *([Or<[DainaToken][DainaSourceFileCharacter]>] tokenOrUntokenisedCharacter) -> [DainaToken] {
					[DainaToken] tokenOrUnknownToken = \[ControlFlow<[DainaToken]>]:selectWithSelectorOrDefault (*([[DainaToken]->]t){\tokenOrUntokenisedCharacter:isLeftOrRight (*([DainaToken] token) {
								<instant ##printf("assd\n");##;
							\t token;
						})
						(*([DainaSourceFileCharacter]c){\t (\[DainaTokens]:UNKNOWN_TOKEN_AT_POSITION (\c:positionInSourceFile))})}) (*->\[DainaTokens]:UNKNOWN_TOKEN_AT_POSITION (_badPositionDueToLanguageLimitation))
				} -> tokenOrUnknownToken
			}
	} -> sequenceOfTokensRepresentingSourceFileCharacters
}

@@
[DainaTokenisingRules] 
{
	:: IGNORE_ALL_WHITESPACE *-> (\[TokenisingRule<[DainaSourceFileCharacter][DainaToken]>]:newTokeniserRuleWithTokeniserDecisionFromParticleStream *([ParticleStream<[DainaSourceFileCharacter]>] characterStream) -> [TokeniserDecision<[DainaToken]>] {
			\[ControlFlow]:repeatWhile (*->\WHITESPACE_CHARACTERS:maybeCharacterIsInSet (\characterStream:maybePeekAtNext)) *{
				[] _ = \characterStream:maybeTakeNext;
			};
		} -> \[TokeniserDecision<[DainaToken]>]:dontProduceAnyToken)
}
@@

[DainaSourceCharacterSets] (
		DainaSourceCharacterSet,
		Byte
	) -> (
			DainaTokeniser
		)
{@@
	:: WHITESPACE_CHARACTERS * -> [DainaSourceCharacterSet] {
		[DainaSourceCharacterSet] whitespaceCharacterSet = \[DainaSourceCharacterSet]:emptyDainaCharacterSet;
		\whitespaceCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b09);
		\whitespaceCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b0A);
		\whitespaceCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b0B);
		\whitespaceCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b0C);
		\whitespaceCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b0D);
		\whitespaceCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b20);
	} -> whitespaceCharacterSet@@

	:: WHITESPACE_CHARACTERS * -> [DainaSourceCharacterSet] {
		[DainaSourceCharacterSet] whitespaceCharacterSet = \[DainaSourceCharacterSet]:emptyDainaCharacterSet;
		\whitespaceCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b09);
		\whitespaceCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b0A);
		\whitespaceCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b0B);
		\whitespaceCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b0C);
		\whitespaceCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b0D);
		\whitespaceCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b20);
	} -> whitespaceCharacterSet

	:: IDENTIFIER_CHARACTERS * -> [DainaSourceCharacterSet] {
		[DainaSourceCharacterSet] identifierCharacterSet = \[DainaSourceCharacterSet]:emptyDainaCharacterSet;
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b30);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b31);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b32);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b33);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b34);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b35);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b36);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b37);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b38);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b39);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b41);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b42);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b43);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b44);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b45);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b46);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b47);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b48);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b49);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b4A);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b4B);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b4C);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b4D);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b4E);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b4F);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b50);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b51);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b52);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b53);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b54);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b55);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b56);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b57);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b58);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b59);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b5A);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b5F);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b61);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b62);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b63);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b64);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b65);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b66);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b67);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b68);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b69);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b6A);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b6B);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b6C);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b6D);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b6E);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b6F);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b70);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b71);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b72);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b73);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b74);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b75);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b76);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b77);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b78);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b79);
		\identifierCharacterSet:addCharacterToSetRepresentedWithASCIIByte (\[Byte]:byteFromLiteral 0b7A);
	} -> identifierCharacterSet
}


[DainaSourceCharacterSet : [CharacterSet]] (
		Byte,
		String,
		Boolean,
		Set,
		CharacterSet,
		DainaSourceFileCharacter,
		ControlFlow,
		Maybe
	) -> (
			DainaTokeniser,
			DainaSourceCharacterSets
		)
{
	~ emptyDainaCharacterSet *{
		\::emptyCharacterSet;
	}

	++ characterIsInSet *([DainaSourceFileCharacter] givenCharacter) -> [Boolean] {
	} -> \:characterExistsInSetRepresentedWithASCIIByte (\givenCharacter:byteRepresentingCharacter)

	++ maybeCharacterIsInSet *([Maybe<[DainaSourceFileCharacter]>] maybeGivenCharacter) -> [Boolean] {
	} -> \[ControlFlow<[Boolean]>]:selectWithSelectorOrDefault (*([[Boolean]->]select){
			\maybeGivenCharacter:ifJust *([DainaSourceFileCharacter] givenCharacter){
				\select (\:characterIsInSet givenCharacter)
			}
		}) (*->\[Boolean]:FALSE)
}









