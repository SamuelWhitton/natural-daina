
[DainaSourceFileTokeniser : [Object]] (
		Object,
		Sequence,
		DainaToken,
		File,
		Data,
		DainaStatusReporter
	)
{
	~ newDainaSourceFileTokeniserWithDainaStatusReporter *([DainaStatusReporter] dainaStatusReporter){
		\::newObject;
	}

	++ tokeniseDainaSourceFileIntoSequenceOfTokensWithinNamespace *([File] dainaSourceFile, [DainaNamespace] namespace) -> [Sequence<[DainaToken]>] {
		[Data] dataFromDainaSource = \dainaSourceFile:getAllDataInFile;
		[Sequence<[Byte]>] byteSequenceFromDainaSource = \dataFromDainaSource:dataAsSequenceOfBytes;
		[Sequence<[Sequence<[Byte]>]>] sequenceOfLinesInSourceRepresentedByByteSequences = \splitSequenceIntoSubsequencesBetweenNewlines byteSequenceFromDainaSource;
		[Sequence<[DainaSourceFileCharacter]>] charactersInSource = \transformByteSequencesRepresentingLinesInSourceIntoCharacterSequence sequenceOfLinesInSourceRepresentedByByteSequences;
	}	!{
			splitSequenceIntoSubsequencesBetweenNewlines
			transformByteSequencesRepresentingLinesInSourceIntoCharacterSequence
					@\[Sequences<[Sequence<[Byte]>][Sequence<[DainaSourceFileCharacter]>]>]:sequenceByMappingTransformationOverSequence transformByteSequenceRepresentingLineInFileIntoCharacterSequence sequenceOfLinesInSourceRepresentedByByteSequences;

		}
	-> (\:tokeniseDainaSourceFileCharactersIntoSequenceOfTokensWithinNamespace charactersInSource namespace)

	- tokeniseDainaSourceFileCharactersIntoSequenceOfTokensWithinNamespace *([Sequence<[DainaSourceFileCharacter]>] sourceFileCharacters, [DainaNamespace] namespace) -> [Sequence<[DainaToken]>] {

	}
}
@@
[DainaSourceFileReader : [Object]] (
		Object,
		File,
		Sequence,
		Byte,
		Variable
	) -> (
			DainaSourceFileTokeniser
		)
	[Variable<[Sequence<[DainaSourceFileCharacter]>]>] variableUnreadBytesInCurrentDainaSourceFileLine
	[Variable<[Sequence<[DainaSourceFileCharacter]>]>]
{
	~ readerForDainaSourceFile *([File] dainaSourceFile) {

	}
}
@@