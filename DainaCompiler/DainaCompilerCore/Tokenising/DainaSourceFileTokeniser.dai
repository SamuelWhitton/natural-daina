
[DainaSourceFileTokeniser : [Object]] (
		Object,
		Sequence,
		DainaToken,
		File,
		Data,
		Boolean,
		Natural,
		Sequences,
		Variable,
		DainaStatusReporter,
		DainaSourceFilePosition,
		DainaSourceFileCharacter,
		DainaTokeniser,
		ControlFlow,
		String,
		Byte,
		And,
		DainaNamespace
	)
	[DainaStatusReporter] dainaStatusReporter
{
	~ newDainaSourceFileTokeniserWithDainaStatusReporter *([DainaStatusReporter] dainaStatusReporter){
		\::newObject;
		.dainaStatusReporter = dainaStatusReporter;
	}

	++ tokeniseDainaSourceFileIntoSequenceOfTokensWithinNamespace *([File] dainaSourceFile, [DainaNamespace] namespace) -> [Sequence<[DainaToken]>] {
		[Data] dataFromDainaSource = \dainaSourceFile:getAllDataInFile;
		[Sequence<[Byte]>] byteSequenceFromDainaSource = \dataFromDainaSource:dataAsSequenceOfBytes;
		[Sequence<[DainaSourceFileCharacter]>] charactersInSource = \transformByteSequenceFromDainaSourceIntoCharacterSequence byteSequenceFromDainaSource;
		[Sequence<[DainaToken]>] tokenisedDainaSourceFile = (\dainaTokeniser:tokeniseDainaSourceFileCharactersIntoSequenceOfDainaTokens charactersInSource)
			!{
				[DainaTokeniser] dainaTokeniser = \[DainaTokeniser]:dainaTokeniserWithDainaStatusReporterAndNamespace .dainaStatusReporter namespace;
			};
	}	!{
			[[Sequence<[Byte]>]->[Sequence<[DainaSourceFileCharacter]>]] transformByteSequenceFromDainaSourceIntoCharacterSequence = *([Sequence<[Byte]>] byteSequenceFromDainaSource) -> [Sequence<[DainaSourceFileCharacter]>] {
				[Sequence<[DainaSourceFileCharacter]>] characterSequence = \[ControlFlow<[Sequence<[DainaSourceFileCharacter]>]>]:constructRecursively constructCharacterSequenceRecursively
					!{
						[[->[Sequence<[DainaSourceFileCharacter]>]]->[Sequence<[DainaSourceFileCharacter]>]] constructCharacterSequenceRecursively = *([->[Sequence<[DainaSourceFileCharacter]>]] constructRestOfCharacterSequence) -> [Sequence<[DainaSourceFileCharacter]>] {
						} -> ((\[ControlFlow<[Sequence<[DainaSourceFileCharacter]>]>]:selectWithSelectorOrDefault selectCharacterSequenceIfNonEmpty (*->\[Sequence<[DainaSourceFileCharacter]>]:emptySequence))
								!{
									[[[Sequence<[DainaSourceFileCharacter]>]->]->] selectCharacterSequenceIfNonEmpty= *([[Sequence<[DainaSourceFileCharacter]>]->] selectCharacterSequence) {
										\byteSequenceFromCurrentLineInDainaSource:ifFirstAndRestOfSequence selectCharacterRepresentingNextByteFromCurrentLineAndRestOfSequenceRecursvely;
										\byteSequenceFromCurrentLineInDainaSource:ifEmptySequence gotoNextLineInDainaSourceFileIfExistsAndSelectSequenceRecursively;
									}	!{
											[Sequence<[Byte]>] byteSequenceFromCurrentLineInDainaSource = \currentByteSequenceFromCurrentLineInDainaSource:get;
											
											[[Byte][Sequence<[Byte]>]->] selectCharacterRepresentingNextByteFromCurrentLineAndRestOfSequenceRecursvely = *([Byte] nextByteFromCurrentLine, [Sequence<[Byte]>] restOfBytesInLine) {
												\currentByteSequenceFromCurrentLineInDainaSource:set restOfBytesInLine;
												\selectCharacterSequence (\[Sequence<[DainaSourceFileCharacter]>]:sequenceWithFirstAndRestOfSequenceProvider characterRepresentingNextByte constructRestOfCharacterSequence)
													!{
														[DainaSourceFileCharacter] characterRepresentingNextByte = \[DainaSourceFileCharacter]:characterRepresentingASCIICharacterByteInPosition nextByteFromCurrentLine (\movePositionToNextInLineReturningCurrentPosition);
													}
											};

											[->] gotoNextLineInDainaSourceFileIfExistsAndSelectSequenceRecursively = *{
												[Sequence<[Byte]>] unprocessedByteSequenceFromDainaSource = \currentUnprocessedByteSequenceFromDainaSource:get;
												\unprocessedByteSequenceFromDainaSource:ifFirstAndRestOfSequence *([]_,[]__) {
													\movePositionToNextLine;
													\selectCharacterSequence (\constructRestOfCharacterSequence);
												};
											}
										}
								})
					}
			}	!{
					[Variable<[Sequence<[Byte]>]>] currentUnprocessedByteSequenceFromDainaSource = \[Variable<[Sequence<[Byte]>]>]:as byteSequenceFromDainaSource;
					[Variable<[Sequence<[Byte]>]>] currentByteSequenceFromCurrentLineInDainaSource = \[Variable<[Sequence<[Byte]>]>]:as (\[Sequence<[Byte]>]:emptySequence);
					
					[Byte] newlineByte = \[Byte]:newByte 0b0A;
					
					[[Byte]->[Boolean]] isByteANewline = *([Byte]b)->[Boolean]{}->\b:sameAsByte newlineByte;
					
					[->[String]] gotoNextLineInDainaSourceReturningStringContentOfLine = *() -> [String] {
						[And<[Sequence<[Byte]>][Sequence<[Byte]>]>] nextLineAndRestOfBytes = (\nextLineAndRestOfBytesFromByteSequence (\currentUnprocessedByteSequenceFromDainaSource:get))
						\currentByteSequenceFromCurrentLineInDainaSource:set (\nextLineAndRestOfBytes:left);
						\currentUnprocessedByteSequenceFromDainaSource:set (\nextLineAndRestOfBytes:right);
					}	!{
							[[Sequence<[Byte]>]->[And<[Sequence<[Byte]>][Sequence<[Byte]>]>]] nextLineAndRestOfBytesFromByteSequence = *([Sequence<[Byte]>] givenByteSequence) -> [And<[Sequence<[Byte]>][Sequence<[Byte]>]>] {
							} -> \[Sequences<[Byte]>]:splitSequenceIntoHeadAndTailWithIsElementEndOfHead givenByteSequence isByteANewline;
						}
					-> \[String]:stringWithASCIIDataRepresentationOfString (\[Data]:dataFromSequenceOfBytes (\nextLineAndRestOfBytes:left));

					[String] contentOfFirstLineInSource = \gotoNextLineInDainaSourceReturningStringContentOfLine;
					[Variable<[DainaSourceFilePosition]>] currentSourceFilePosition = \[Variable<[DainaSourceFilePosition]>]:as (\[DainaSourceFilePosition]:firstCharacterPositionInDainaSourceFileWithFilePathAndFirstLineContent (\dainaSourceFile:getFilePathOfFile) (contentOfFirstLineInSource));

					[->] movePositionToNextLine = *{
						[DainaSourceFilePosition] previousSourceFilePosition = \currentSourceFilePosition:get;
						[DainaSourceFilePosition] nextSourceFilePosition = \previousSourceFilePosition:firstPositionOnNextLineWithNextLineContent (\gotoNextLineInDainaSourceReturningStringContentOfLine);
						\currentSourceFilePosition:set nextSourceFilePosition;
					};

					[->[DainaSourceFilePosition]] movePositionToNextInLineReturningCurrentPosition = *() -> [DainaSourceFilePosition] {
						[DainaSourceFilePosition] previousSourceFilePosition = \currentSourceFilePosition:get;
						[DainaSourceFilePosition] nextSourceFilePosition = \previousSourceFilePosition:nextPositionOnSameLine;
						\currentSourceFilePosition:set nextSourceFilePosition;
					} -> previousSourceFilePosition;
				}
			-> characterSequence;
		}
	-> (tokenisedDainaSourceFile)
}



