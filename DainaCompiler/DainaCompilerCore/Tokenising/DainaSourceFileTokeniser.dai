
[DainaSourceFileTokeniser : [Object]] (
		Object,
		Sequence,
		DainaToken,
		File,
		Data,
		Boolean,
		Natural,
		Sequences,
		Variable,
		DainaStatusReporter,
		DainaSourceFileLineReference,
		DainaSourceFilePosition,
		DainaSourceFileCharacter,
		DainaTokeniser,
		String,
		Byte,
		DainaNamespace
	)
	[DainaStatusReporter] dainaStatusReporter
{
	~ newDainaSourceFileTokeniserWithDainaStatusReporter *([DainaStatusReporter] dainaStatusReporter){
		\::newObject;
		.dainaStatusReporter = dainaStatusReporter;
	}

	++ tokeniseDainaSourceFileIntoSequenceOfTokensWithinNamespace *([File] dainaSourceFile, [DainaNamespace] namespace) -> [Sequence<[DainaToken]>] {
		[Data] dataFromDainaSource = \dainaSourceFile:getAllDataInFile;
		[Sequence<[Byte]>] byteSequenceFromDainaSource = \dataFromDainaSource:dataAsSequenceOfBytes;
		[Sequence<[DainaSourceFileCharacter]>] charactersInSource = \transformByteSequenceFromDainaSourceIntoCharacterSequence byteSequenceFromDainaSource;
		[Sequence<[DainaToken]>] tokenisedDainaSourceFile = (\dainaTokeniser:tokeniseDainaSourceFileCharactersIntoSequenceOfDainaTokens charactersInSource)
			!{
				[DainaTokeniser] dainaTokeniser = \[DainaTokeniser]:dainaTokeniserWithDainaStatusReporterAndNamespace .dainaStatusReporter namespace;
			};
	}	!{
			@@[[Sequence<[Byte]>]->[Sequence<[Sequence<[Byte]>]>]] splitByteSequenceIntoSubsequencesOfEachLine = *([Sequence<[Byte]>] sequenceToSplitIntoLines) -> [Sequence<[Sequence<[Byte]>]>] {
				[Sequence<[Sequence<[Byte]>]>] splittedSubsequencesOfEachLine = \[Sequences<[Byte]>]:sequenceBySplittingSequenceWithShouldSplitOnGivenElement sequenceToSplitIntoLines isByteANewline
					!{
						[Byte] newlineByte = \[Byte]:newByte 0b0A;
						[[Byte]->[Boolean]] isByteANewline = *([Byte]b)->[Boolean]{}->b:sameAsByte newlineByte;
					};
			} -> splittedSubsequencesOfEachLine;@@

			[[Sequence<[Byte]>]->[Sequence<[DainaSourceFileCharacter]>]] transformByteSequenceFromDainaSourceIntoCharacterSequence = *([Sequence<[Byte]>] byteSequenceFromDainaSource) -> [Sequence<[DainaSourceFileCharacter]>] {
				[Sequence<[DainaSourceFileCharacter]>] byteSequenceRepresentingAllCharacters \[Sequences<[Byte][DainaSourceFileCharacter]>]:sequenceByMappingTransformationOverSequence transformNextByteFromSourceIntoCharacter byteSequenceFromDainaSource;
				[Sequence<[Sequence<[DainaSourceFileCharacter]>]>] byteSequencesRepresentingCharactersForEachLine = \[Sequences<[Sequence<[Byte]>][Sequence<[DainaSourceFileCharacter]>]>]:sequenceByMappingTransformationOverSequence transformNextLineOfSourceFromBytesIntoCharacters byteSequenceRepresentingLines;
				[Sequence<[DainaSourceFileCharacter]>] byteSequenceRepresentingAllCharacters = \[Sequences<[DainaSourceFileCharacter]>]:sequenceByFlatteningSequenceOfSequences byteSequencesRepresentingCharactersForEachLine;
			}	!{
					[Variable<[Natural]>] currentLineNumber = \[Variable<[Natural]>]:as (\[Natural]:naturalFromLiteral 1);

					transformNextByteFromSourceIntoCharacter
						
					[[Sequence<[Byte]>]->[Sequence<[DainaSourceFileCharacter]>]] transformNextLineOfSourceFromBytesIntoCharacters = *([Sequence<[Byte]>] byteLineInSource) -> [Sequence<[DainaSourceFileCharacter]>] {
						<instant ##printf("AAA\n");##;
						[DainaSourceFileLineReference] sourceLineReference = \getNextDainaSourceFileLineReferenceForByteLineInSource byteLineInSource;
						[Sequence<[DainaSourceFileCharacter]>] lineInSourceAsDainaSourceFileCharacters = (\[Sequences<[Byte][DainaSourceFileCharacter]>]:sequenceByMappingTransformationOverSequence transformNextByteIntoDainaSourceFileCharacter byteLineInSource)
							!{
								[Variable<[Natural]>] currentLinePosition = \[Variable<[Natural]>]:as (\[Natural]:naturalFromLiteral 1);

								[[Byte]->[DainaSourceFileCharacter]] transformNextByteIntoDainaSourceFileCharacter = *([Byte] nextGivenByte) -> [DainaSourceFileCharacter] {
									[Natural] linePosition = \currentLinePosition:get;
									[DainaSourceFileCharacter] sourceFileCharacter = \[DainaSourceFileCharacter]:newDainaSourceFileCharacterRepresentingASCIICharacterByteInPosition nextGivenByte characterPosition
										!{
											[DainaSourceFilePosition] characterPosition = \[DainaSourceFilePosition]:dainaSourceFilePositionReferenceWithLineReferenceAndLinePosition sourceLineReference linePosition;
										};
									\currentLinePosition:set (\linePosition:naturalByAdding (\[Natural]:naturalFromLiteral 1));
								} -> sourceFileCharacter;
							};
						
					} 	!{
							[[Sequence<[Byte]>]->[DainaSourceFileLineReference]] getNextDainaSourceFileLineReferenceForByteLineInSource = *([Sequence<[Byte]>] byteLineInSource)->[DainaSourceFileLineReference] {
								[Natural] lineNumber = \currentLineNumber:get;
								[DainaSourceFileLineReference] sourceLineReference = \[DainaSourceFileLineReference]:dainaSourceFilePathAndLineNumberAndLineContent (\dainaSourceFile:getFilePathOfFile) lineNumber lineContent
									!{
										[String] lineContent = \[String]:stringWithASCIIDataRepresentationOfString (\[Data]:dataFromSequenceOfBytes byteLineInSource);
									};
								\currentLineNumber:set (\lineNumber:naturalByAdding (\[Natural]:naturalFromLiteral 1));
							} -> sourceLineReference;
						}
					-> lineInSourceAsDainaSourceFileCharacters;
				}
			-> byteSequenceRepresentingAllCharacters;
		}
	-> (tokenisedDainaSourceFile)
}



